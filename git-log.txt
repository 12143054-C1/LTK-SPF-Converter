commit 607efec025b3cfb9f87cc16f408728c87670f694
Author: 12143054-C1 <sivan.zusin@intel.com>
Date:   Sun Jun 16 08:59:53 2024 +0300

    updated error handling

diff --git a/LTK_SPF_Converter.py b/LTK_SPF_Converter.py
index 9061978..41229b0 100644
--- a/LTK_SPF_Converter.py
+++ b/LTK_SPF_Converter.py
@@ -466,16 +466,17 @@ class Converter_GUI():
     
     def on_conversion_complete(self):
         # This method will be called when conversion is complete
-        # Write log to logfile
+        
         # Schedule error handling to be run in the main thread
         self.root.after(0, self.handle_error)
 
     def handle_error(self):
+        # Write log to logfile
         self.console_log = self.console_text.get("1.0", "end-1c")
         self.log_path = os.path.join(self.dest_path, 'conversion_log.txt')
         with open(self.log_path, 'a') as logfile:
             logfile.write(self.console_log)
-        if 'Tap not found' in self.console_log:  # Problem with conversion!
+        if '>>> Error:' in self.console_log:  # Problem with conversion!
             self.attachment_paths = []
             lines  = self.console_log.split('\n')
             for i,line in enumerate(lines):
diff --git a/__pycache__/conversion_module.cpython-310.pyc b/__pycache__/conversion_module.cpython-310.pyc
index 2405836..4ada4fd 100644
Binary files a/__pycache__/conversion_module.cpython-310.pyc and b/__pycache__/conversion_module.cpython-310.pyc differ
diff --git a/__pycache__/lnl_spf_2_pythonsv_script_BlackBox_Advanced.cpython-310.pyc b/__pycache__/lnl_spf_2_pythonsv_script_BlackBox_Advanced.cpython-310.pyc
index 0266c2d..6babf53 100644
Binary files a/__pycache__/lnl_spf_2_pythonsv_script_BlackBox_Advanced.cpython-310.pyc and b/__pycache__/lnl_spf_2_pythonsv_script_BlackBox_Advanced.cpython-310.pyc differ
diff --git a/__pycache__/spf2sv_converter.cpython-310.pyc b/__pycache__/spf2sv_converter.cpython-310.pyc
index 992fa80..822952f 100644
Binary files a/__pycache__/spf2sv_converter.cpython-310.pyc and b/__pycache__/spf2sv_converter.cpython-310.pyc differ
diff --git a/changelog.txt b/changelog.txt
new file mode 100644
index 0000000..59e6875
Binary files /dev/null and b/changelog.txt differ
diff --git a/conversion_module.py b/conversion_module.py
index 058e435..544074f 100644
--- a/conversion_module.py
+++ b/conversion_module.py
@@ -29,49 +29,56 @@ class Converter:
             files_ = os.listdir(self.source_path)
             files = [file for file in files_ if file.lower().endswith('.spf')]
             total_files = len(files)
-            for i, file in enumerate(files):
-                if self.stop_callback():
-                    print("STOPPED !!!!")
-                    ## Open the destination folder after conversion
-                    if os.path.exists(self.dest_path):
-                        self.dest_path = self.dest_path.replace("/","\\")
-                        ## Open the folder using the default file manager
-                    if os.name == "nt":  # Windows
-                        subprocess.Popen(f'explorer "{self.dest_path}"')
-                    elif os.name == "posix":  ## Linux or macOS
-                        subprocess.Popen(["xdg-open", destination_entry.get()])
-                    progress = 0
-                    self.progress_callback(progress)
-                    return
-                ## Folder conversion function here
-                spf2sv_converter.run(
-                    direct_reg= self.use_itpp,
-                    conversion_time= self.conversion_time,
-                    log_file_path= os.path.join(self.dest_path, 'conversion_log.txt'),
-                    _week_folder_en= False,
-                    _input_dir= self.source_path,
-                    _input_file = os.path.join(self.source_path,file),
-                    _output_dir= self.dest_path,
-                    CPUgen= self.cpu_gen
-                )
-                if self.progress_callback:
-                    progress = int((i + 1) / total_files * 100)
-                    self.progress_callback(progress)
+            if total_files == 0:
+                print(">>> Error: no valid files found!")
+            else:
+                for i, file in enumerate(files):
+                    if self.stop_callback():
+                        print("STOPPED !!!!")
+                        ## Open the destination folder after conversion
+                        if os.path.exists(self.dest_path):
+                            self.dest_path = self.dest_path.replace("/","\\")
+                            ## Open the folder using the default file manager
+                        if os.name == "nt":  # Windows
+                            subprocess.Popen(f'explorer "{self.dest_path}"')
+                        elif os.name == "posix":  ## Linux or macOS
+                            subprocess.Popen(["xdg-open", destination_entry.get()])
+                        progress = 0
+                        self.progress_callback(progress)
+                        return
+                    ## Folder conversion function here
+                    spf2sv_converter.run(
+                        direct_reg= self.use_itpp,
+                        conversion_time= self.conversion_time,
+                        log_file_path= os.path.join(self.dest_path, 'conversion_log.txt'),
+                        _week_folder_en= False,
+                        _input_dir= self.source_path,
+                        _input_file = os.path.join(self.source_path,file),
+                        _output_dir= self.dest_path,
+                        CPUgen= self.cpu_gen
+                    )
+                    if self.progress_callback:
+                        progress = int((i + 1) / total_files * 100)
+                        self.progress_callback(progress)
         else:
             ## File conversion function here
             # Simulate conversion for a single file
-            spf2sv_converter.run(
-                    direct_reg= self.use_itpp,
-                    conversion_time= self.conversion_time,
-                    log_file_path= os.path.join(self.dest_path, 'conversion_log.txt'),
-                    _week_folder_en= False,
-                    _input_dir= os.path.dirname(self.source_path),
-                    _input_file = self.source_path,
-                    _output_dir= self.dest_path,
-                    CPUgen= self.cpu_gen
-                )
-            if self.progress_callback:
-                self.progress_callback(100)
+            files = [file for file in [self.source_path] if file.lower().endswith('.spf')]
+            if not files:
+                print(">>> Error: Invalid file!")
+            else:
+                spf2sv_converter.run(
+                        direct_reg= self.use_itpp,
+                        conversion_time= self.conversion_time,
+                        log_file_path= os.path.join(self.dest_path, 'conversion_log.txt'),
+                        _week_folder_en= False,
+                        _input_dir= os.path.dirname(self.source_path),
+                        _input_file = self.source_path,
+                        _output_dir= self.dest_path,
+                        CPUgen= self.cpu_gen
+                    )
+                if self.progress_callback:
+                    self.progress_callback(100)
         
         with open(os.path.join(self.dest_path, 'conversion_log.txt'), 'a') as f:
             f.write(f"Source: {self.source_path}\n")
diff --git a/lnl_spf_2_pythonsv_script_BlackBox_Advanced.py b/lnl_spf_2_pythonsv_script_BlackBox_Advanced.py
index 15d7cf7..4dcf0bf 100644
--- a/lnl_spf_2_pythonsv_script_BlackBox_Advanced.py
+++ b/lnl_spf_2_pythonsv_script_BlackBox_Advanced.py
@@ -318,6 +318,7 @@ class Command():
                 print(f"row number: {row_num}")
                 print(self.prev_row)
                 print(row)
+                print(">>> Error: No reg names!")
                 raise error_msg("no reg names")
 
         if row.startswith(r"focus_tap"):
@@ -335,7 +336,7 @@ class Command():
                     self.focus_tap_sv.append(self.focus_tap_dict[tap])
                     self.taps_used.add(self.focus_tap_dict[tap])
                 except KeyError as e:
-                    print(" Tap not found: " + str(e))
+                    print(" >>> Error: Tap not found: " + str(e))
                     context_search_and_print(tap, self.Root_Path, 10)
                     return 1
                 
diff --git a/ltk_spf_history.csv b/ltk_spf_history.csv
index 9eb7a43..2086267 100644
--- a/ltk_spf_history.csv
+++ b/ltk_spf_history.csv
@@ -1,3 +1,3 @@
-C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/TCSS/all spfs/func_tc0_dp_anelb_10_20_lfsr31_sr.spf
+"C:/Users/szusin/Downloads/crown-1,crown-2,crown-3.zip",C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/TCSS/all spfs/func_tc0_dp_anelb_10_20_lfsr31_sr.spf
 C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/PCIe5,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/TCSS/all spfs,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/CDPHY,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/HPTP
-C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/PCIe5\LTK_13-06-24_17-41-02,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/TCSS/all spfs\LTK_13-06-24_17-40-04,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/TCSS/all spfs\LTK_13-06-24_17-36-12,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/CDPHY\LTK_13-06-24_17-28-08,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/CDPHY\LTK_13-06-24_17-28-07,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/TCSS/all spfs\LTK_13-06-24_17-26-29,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/TCSS/all spfs\LTK_13-06-24_17-25-45,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/TCSS/all spfs\LTK_13-06-24_17-23-39,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/TCSS/all spfs\LTK_13-06-24_17-22-20,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/HPTP\LTK_13-06-24_16-42-45,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/HPTP\LTK_13-06-24_16-39-33,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/HPTP\LTK_13-06-24_16-38-51,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/HPTP\LTK_13-06-24_16-33-21,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/HPTP\LTK_13-06-24_16-32-49,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/HPTP\LTK_13-06-24_16-32-04,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/HPTP\LTK_13-06-24_16-27-45,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/HPTP\LTK_13-06-24_15-51-36,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/HPTP\LTK_13-06-24_15-50-51,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/HPTP\LTK_13-06-24_15-45-18,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/HPTP\LTK_13-06-24_15-43-20,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/HPTP\LTK_13-06-24_15-41-31,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/HPTP\LTK_13-06-24_15-33-57,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/HPTP\LTK_13-06-24_15-28-05,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/HPTP\LTK_13-06-24_15-14-01,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/HPTP\LTK_13-06-24_15-12-29,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/HPTP\LTK_13-06-24_15-05-09,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/HPTP\LTK_13-06-24_15-02-18,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/HPTP\LTK_13-06-24_15-00-07,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/HPTP\LTK_13-06-24_14-59-06,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/HPTP\LTK_13-06-24_14-58-11,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/HPTP\LTK_13-06-24_14-55-36,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/HPTP\LTK_13-06-24_14-51-19,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/CDPHY\LTK_13-06-24_14-36-20,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/CDPHY\LTK_13-06-24_14-34-50,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/CDPHY\LTK_13-06-24_14-30-52,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/CDPHY\LTK_13-06-24_14-28-10,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/CDPHY\LTK_13-06-24_14-27-22,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/CDPHY\LTK_13-06-24_14-26-38,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/CDPHY\LTK_13-06-24_14-24-44,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/CDPHY\LTK_13-06-24_14-21-22,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/CDPHY\LTK_13-06-24_14-20-04,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/CDPHY\LTK_13-06-24_14-18-53,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/CDPHY\LTK_13-06-24_14-15-54
+C:/Users/szusin/Downloads\LTK_16-06-24_08-49-05,C:/Users/szusin/Downloads\LTK_16-06-24_08-46-35,C:/Users/szusin/Downloads\LTK_16-06-24_08-45-45,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/PCIe5\LTK_13-06-24_17-41-02,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/TCSS/all spfs\LTK_13-06-24_17-40-04,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/TCSS/all spfs\LTK_13-06-24_17-36-12,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/CDPHY\LTK_13-06-24_17-28-08,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/CDPHY\LTK_13-06-24_17-28-07,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/TCSS/all spfs\LTK_13-06-24_17-26-29,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/TCSS/all spfs\LTK_13-06-24_17-25-45,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/TCSS/all spfs\LTK_13-06-24_17-23-39,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/TCSS/all spfs\LTK_13-06-24_17-22-20,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/HPTP\LTK_13-06-24_16-42-45,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/HPTP\LTK_13-06-24_16-39-33,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/HPTP\LTK_13-06-24_16-38-51,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/HPTP\LTK_13-06-24_16-33-21,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/HPTP\LTK_13-06-24_16-32-49,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/HPTP\LTK_13-06-24_16-32-04,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/HPTP\LTK_13-06-24_16-27-45,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/HPTP\LTK_13-06-24_15-51-36,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/HPTP\LTK_13-06-24_15-50-51,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/HPTP\LTK_13-06-24_15-45-18,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/HPTP\LTK_13-06-24_15-43-20,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/HPTP\LTK_13-06-24_15-41-31,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/HPTP\LTK_13-06-24_15-33-57,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/HPTP\LTK_13-06-24_15-28-05,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/HPTP\LTK_13-06-24_15-14-01,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/HPTP\LTK_13-06-24_15-12-29,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/HPTP\LTK_13-06-24_15-05-09,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/HPTP\LTK_13-06-24_15-02-18,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/HPTP\LTK_13-06-24_15-00-07,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/HPTP\LTK_13-06-24_14-59-06,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/HPTP\LTK_13-06-24_14-58-11,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/HPTP\LTK_13-06-24_14-55-36,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/HPTP\LTK_13-06-24_14-51-19,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/CDPHY\LTK_13-06-24_14-36-20,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/CDPHY\LTK_13-06-24_14-34-50,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/CDPHY\LTK_13-06-24_14-30-52,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/CDPHY\LTK_13-06-24_14-28-10,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/CDPHY\LTK_13-06-24_14-27-22,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/CDPHY\LTK_13-06-24_14-26-38,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/CDPHY\LTK_13-06-24_14-24-44,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/CDPHY\LTK_13-06-24_14-21-22,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/CDPHY\LTK_13-06-24_14-20-04,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/CDPHY\LTK_13-06-24_14-18-53,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/CDPHY\LTK_13-06-24_14-15-54

commit 11acef4aa7b289ae27236d9d77779e0bff290fb4
Author: 12143054-C1 <sivan.zusin@intel.com>
Date:   Thu Jun 13 17:46:59 2024 +0300

    fix!!!

diff --git a/HELP_Compiler/LTK_SPF_HELP.chm b/HELP_Compiler/LTK_SPF_HELP.chm
new file mode 100644
index 0000000..08c439a
Binary files /dev/null and b/HELP_Compiler/LTK_SPF_HELP.chm differ
diff --git a/HELP_Compiler/conversion_options.html b/HELP_Compiler/conversion_options.html
index 4b042a5..4e0618d 100644
--- a/HELP_Compiler/conversion_options.html
+++ b/HELP_Compiler/conversion_options.html
@@ -10,7 +10,7 @@
     <p>To specify conversion options, follow these steps:</p>
     <ol>
         <li>In the "Options" section of the application, locate the "CPU Gen" dropdown menu.</li>
-        <li>Select the appropriate CPU generation from the options available: PTL, LNL, MTL-P, MTL1.</li>
+        <li>Select the appropriate CPU generation from the options available: PTL, LNL.</li>
         <li>If you want to include itpp comments in the conversion, check the "Use itpp Comments" checkbox.</li>
     </ol>
 </body>
diff --git a/LTK_SPF_Converter.py b/LTK_SPF_Converter.py
index 9325c82..9061978 100644
--- a/LTK_SPF_Converter.py
+++ b/LTK_SPF_Converter.py
@@ -8,16 +8,72 @@
 #############################
 
 import tkinter as tk
-from tkinter import ttk, messagebox, filedialog
+from tkinter import ttk, messagebox, filedialog, simpledialog
+import tkinter.font as tkFont
 import os
+import sys
 import subprocess
 import csv
 from datetime import datetime
 import threading
 from conversion_module import Converter
 
-VERSION = '2.0.2'
-
+VERSION = '2.1.0'
+
+
+def send_email_with_attachments(to_email, subject, body, attachment_paths):
+    # Convert the list of attachment paths to a semicolon-separated string
+    attachments = ";".join(attachment_paths)
+
+    # Build the command to run the VBScript
+    command = [
+        'cscript.exe',
+        '//Nologo',  # Suppress script engine logo
+        'compose_email.vbs',  # Path to the VBScript
+        to_email,
+        subject,
+        body,
+        attachments
+    ]
+    # Run the command
+    subprocess.run(command)
+
+class CustomErrorDialog(simpledialog.Dialog):
+    def __init__(self, parent, title, text):
+        self.text = text
+        super().__init__(parent, title)
+    def body(self, master):
+        tk.Label(master, text=self.text).pack(pady=10)
+        return master
+    def buttonbox(self):
+        box = tk.Frame(self)
+        tk.Button(box, text="Send Log", width=10, command=self.send_log).pack(side=tk.LEFT, padx=5, pady=5)
+        tk.Button(box, text="Help", width=10, command=self.help).pack(side=tk.LEFT, padx=5, pady=5)
+        tk.Button(box, text="Cancel", width=10, command=self.cancel).pack(side=tk.LEFT, padx=5, pady=5)
+        self.bind("<Return>", self.send_log)
+        self.bind("<Escape>", self.cancel)
+        box.pack()
+    def send_log(self, event=None):
+        self.result = "send_log"
+        self.destroy()
+    def help(self, event=None):
+        self.result = "help"
+        self.destroy()
+    def cancel(self, event=None):
+        self.result = None
+        self.destroy()
+
+class TextRedirector:
+        def __init__(self, text_widget, tag="stdout"):
+            self.text_widget = text_widget
+            self.tag = tag
+        def write(self, str):
+            self.text_widget.configure(state='normal')
+            self.text_widget.insert('end', str, (self.tag,))
+            self.text_widget.configure(state='disabled')
+            self.text_widget.see('end')  # Scroll to the end
+        def flush(self):
+            pass
 
 class Converter_GUI():
     def __init__(self, root):
@@ -28,7 +84,7 @@ class Converter_GUI():
         # window top bar title
         self.root = root
         self.root.title("LTK SPF Converter")
-        self.root.minsize(1200, 290)  # Set the minimum window size
+        self.root.minsize(1200, 660)  # Set the minimum window size
 
         # Set the window icon
         self.set_window_icon()
@@ -120,14 +176,34 @@ class Converter_GUI():
             root, variable=self.progress, maximum=100)
         self.progress_bar.pack(fill='x', padx=5, pady=5)
 
-        # Floor Frame
-        self.floor_frame = tk.Frame(root)
-        self.floor_frame.pack(fill='x', pady=5, padx=5, side='bottom', anchor='s')
+        # Console Frame
+        self.console_frame = tk.Frame(root)
+        self.console_frame.pack(fill='both', expand=True, padx=0, pady=0)
+        monospace_font = tkFont.Font(family="Courier New", size=10)  # You can change the size as needed
+        self.console_text = tk.Text(
+            self.console_frame,
+            height=10,
+            state='disabled',
+            background='black',
+            foreground='#00FF00',
+            font=monospace_font,
+            )
+        self.console_text.pack(side='left', fill='both', expand=True)
+        # Create a Scrollbar and set it to the right of the Text widget
+        self.scrollbar = tk.Scrollbar(self.console_frame, command=self.console_text.yview)
+        self.scrollbar.pack(side='right', fill='y')
+        # Link the scrollbar to the text widget
+        self.console_text.config(yscrollcommand=self.scrollbar.set)
+        # Redirect standard output
+        sys.stdout = TextRedirector(self.console_text, "stdout")
 
+
+        # Floor Frame
+        self.floor_frame = tk.Frame(root,relief='ridge',borderwidth=2)
+        self.floor_frame.pack(fill='x', pady=0, padx=0, side='bottom', anchor='s')
         # Software Version
         self.version_label = tk.Label(self.floor_frame, text=VERSION)
         self.version_label.pack(side='left')
-
         # Copyright
         self.copyright_label = tk.Label(
             self.floor_frame, text="┬⌐ 2024 Sivan Zusin")
@@ -248,17 +324,15 @@ class Converter_GUI():
         # Function to handle file/folder selection
         if self.source_type.get() == 'File':
             file_path = filedialog.askopenfilename()
-            if os.path.isfile(file_path):
-                self.source_file_history.insert(
-                    0, file_path)  # Update source file history
+            if file_path:
+                self.update_history(self.source_file_history,file_path)
                 self.update_combobox()
                 self.source_select_combobox.set(file_path)
                 base_path = os.path.dirname(file_path)
-        else: #if it's a Folder
+        else: # if it's a Folder
             folder_path = filedialog.askdirectory()
-            if os.path.isdir(folder_path):
-                self.source_folder_history.insert(
-                    0, folder_path)  # Update source folder history
+            if folder_path:
+                self.update_history(self.source_folder_history,folder_path)
                 self.update_combobox()
                 self.source_select_combobox.set(folder_path)
                 base_path = folder_path
@@ -336,17 +410,28 @@ class Converter_GUI():
         self.dest_select_combobox['values'] = self.dest_history
 
     def convert(self):
+        self.console_text.configure(state='normal')  # Temporarily enable the widget for editing
+        self.console_text.delete("1.0", "end")  # Delete all content from the start to the end
+        self.console_text.configure(state='disabled')  # Disable the widget again to make it read-only
         # Check if source and destination are selected, if not raise an error
-        source_path = self.source_select_combobox.get()
-        dest_path = self.dest_select_combobox.get()
-        if not source_path:
+        self.source_path = self.source_select_combobox.get()
+        self.dest_path = self.dest_select_combobox.get()
+        if not self.source_path:
             messagebox.showerror("Error", "Source not selected!")
             return
-        if not dest_path:
+        if not (os.path.isfile(self.source_path) or os.path.isdir(self.source_path)):
+            messagebox.showerror("Error", "Invalid source!")
+            return
+        if not self.dest_path:
             messagebox.showerror("Error", "Destination not selected!")
             return
 
-        # save history
+        # update and save history
+        if os.path.isfile(self.source_path):
+            self.update_history(self.source_file_history,self.source_path)
+        else:
+            self.update_history(self.source_folder_history,self.source_path)
+        self.update_history(self.dest_history,self.dest_path)
         self.save_history()
 
         # Gather conversion details
@@ -357,12 +442,13 @@ class Converter_GUI():
 
         # Create an instance of the Converter class
         converter = Converter(
-            source_path,
-            dest_path,
+            self.source_path,
+            self.dest_path,
             cpu_gen,
             use_itpp,
             self.progress_callback,
-            lambda: self.stop_requested
+            lambda: self.stop_requested,
+            self.on_conversion_complete  # Pass the completion callback
             )
         # Run the conversion in a separate thread
         self.conversion_thread = threading.Thread(target=converter.run_conversion)
@@ -371,21 +457,68 @@ class Converter_GUI():
         self.cancel_button.configure(state='normal')
         self.convert_button.configure(state='disabled')
 
-        # Display conversion details
-        messagebox.showinfo("Convert",  f"Convert button clicked.\n"
-                                        f"Source: {source_path}\n"
-                                        f"Destination: {dest_path}\n"
-                                        f"CPU Gen: {cpu_gen}\n"
-                                        f"Use itpp Comments: {'Yes' if use_itpp else 'No'}")
+        # # Display conversion details
+        # messagebox.showinfo("Convert",  f"Convert button clicked.\n"
+        #                                 f"Source: {source_path}\n"
+        #                                 f"Destination: {dest_path}\n"
+        #                                 f"CPU Gen: {cpu_gen}\n"
+        #                                 f"Use itpp Comments: {'Yes' if use_itpp else 'No'}")
     
+    def on_conversion_complete(self):
+        # This method will be called when conversion is complete
+        # Write log to logfile
+        # Schedule error handling to be run in the main thread
+        self.root.after(0, self.handle_error)
+
+    def handle_error(self):
+        self.console_log = self.console_text.get("1.0", "end-1c")
+        self.log_path = os.path.join(self.dest_path, 'conversion_log.txt')
+        with open(self.log_path, 'a') as logfile:
+            logfile.write(self.console_log)
+        if 'Tap not found' in self.console_log:  # Problem with conversion!
+            self.attachment_paths = []
+            lines  = self.console_log.split('\n')
+            for i,line in enumerate(lines):
+                if 'Tap not found' in line:
+                    self.attachment_paths.append(lines[i+1])
+            error_popup = CustomErrorDialog(self.root, "Problem Detected", "A problem was detected with the conversion. Would you like to send the log to the developer for debugging?")
+            response = error_popup.result
+            if response == "send_log":
+                self.send_log_to_developer(self.log_path)
+            elif response == "help":
+                self.show_help()
+        else:
+            messagebox.showinfo("Conversion Complete", "The file conversion process has finished.")
+
+        # Re-enable the Convert button and disable the Cancel button
+        self.convert_button.configure(state='normal')
+        self.cancel_button.configure(state='disabled')
+
+    def send_log_to_developer(self,log_path):
+        # Function to handle the sending of log files to the developer
+        # This is a placeholder for your actual sending logic, which might use email, FTP, HTTP POST, etc.
+        print("Log would be sent to the developer.")
+        to_email = "sivan.zusin@intel.com"
+        subject = "LTK SPF Conversion Problem"
+        body = "This is an automatically generated Email. The Log file and a sample of the problematic SPF files will be sent to the developer for debugging. A fixed will be soon provided to you.\n\nThanks."
+        self.attachment_paths.append(log_path)
+        send_email_with_attachments(to_email, subject, body, self.attachment_paths)
+
+    def show_help(self):
+        # Function to show help information
+        messagebox.showinfo("Help", "Please contact support@example.com for help with conversion issues.")
+
     def stop_convertion(self):
         self.stop_requested = True  # Signal the thread to stop
         #self.conversion_thread.join()  # Wait for the thread to finish
+        self.handle_error()
         self.cancel_button.configure(state='disabled')
         self.convert_button.configure(state='normal')
 
 
 if __name__ == "__main__":
+    original_stdout = sys.stdout
     root = tk.Tk()
     app = Converter_GUI(root)
     root.mainloop()
+    sys.stdout = original_stdout
\ No newline at end of file
diff --git a/LTK_SPF_HELP.chm b/LTK_SPF_HELP.chm
index b8b7294..08c439a 100644
Binary files a/LTK_SPF_HELP.chm and b/LTK_SPF_HELP.chm differ
diff --git a/Release.py b/Release.py
index dbb7c0d..fb71ee2 100644
--- a/Release.py
+++ b/Release.py
@@ -34,6 +34,7 @@ def main():
     help_file = os.path.join(base_dir, "LTK_SPF_HELP.chm")
     history_file = os.path.join(base_dir, "ltk_spf_history.csv")
     script_path = os.path.join(base_dir, f"{module_name}.py")
+    email_sender_path = os.path.join(base_dir, "compose_email.vbs")
 
     # Define the output directory relative to the current directory
     output_dir = os.path.join(base_dir, "Release", f"{module_name}_{version_number}")
@@ -42,11 +43,12 @@ def main():
     os.makedirs(output_dir, exist_ok=True)
 
     # Run pyinstaller
-    os.system(f'pyinstaller --noconfirm --onefile --console --icon "{icon_path}" --add-data "{icon_path};." --add-data "{help_file};." --add-data "{history_file};." "{script_path}" --distpath "{output_dir}"')
+    os.system(f'pyinstaller --noconfirm --onefile --windowed --icon "{icon_path}" --add-data "{icon_path};." --add-data "{help_file};." --add-data "{history_file};." "{script_path}" --distpath "{output_dir}"')
 
     # Copy additional files to the output directory
     shutil.copy(icon_path, output_dir)
     shutil.copy(help_file, output_dir)
+    shutil.copy(email_sender_path, output_dir)
 
     # Create empty history file
     with open(os.path.join(output_dir,"ltk_spf_history.csv"),'w') as h:
diff --git a/__pycache__/conversion_module.cpython-310.pyc b/__pycache__/conversion_module.cpython-310.pyc
index ef1c961..2405836 100644
Binary files a/__pycache__/conversion_module.cpython-310.pyc and b/__pycache__/conversion_module.cpython-310.pyc differ
diff --git a/__pycache__/lnl_spf_2_pythonsv_script_BlackBox_Advanced.cpython-310.pyc b/__pycache__/lnl_spf_2_pythonsv_script_BlackBox_Advanced.cpython-310.pyc
index fbcd187..0266c2d 100644
Binary files a/__pycache__/lnl_spf_2_pythonsv_script_BlackBox_Advanced.cpython-310.pyc and b/__pycache__/lnl_spf_2_pythonsv_script_BlackBox_Advanced.cpython-310.pyc differ
diff --git a/compose_email.vbs b/compose_email.vbs
new file mode 100644
index 0000000..36bbb5f
--- /dev/null
+++ b/compose_email.vbs
@@ -0,0 +1,36 @@
+' Get arguments from command line
+Dim ToEmail
+Dim Subject
+Dim Body
+Dim Attachments
+Dim Args, Arg
+
+Set Args = WScript.Arguments
+
+ToEmail = Args(0)
+Subject = Args(1)
+Body = Args(2)
+Attachments = Args(3)
+
+Set Outlook = CreateObject("Outlook.Application")
+Set Mail = Outlook.CreateItem(0)
+
+Mail.To = ToEmail
+Mail.Subject = Subject
+Mail.Body = Body
+
+' Handle attachments; expecting a string with paths separated by a semicolon
+If Attachments <> "" Then
+    Dim AttachmentPaths
+    AttachmentPaths = Split(Attachments, ";")
+    Dim Path
+    For Each Path In AttachmentPaths
+        If Path <> "" Then
+            Mail.Attachments.Add(Path)
+        End If
+    Next
+End If
+
+Mail.Display ' To show the email
+Set Mail = Nothing
+Set Outlook = Nothing
diff --git a/conversion_module.py b/conversion_module.py
index 5e1fa51..058e435 100644
--- a/conversion_module.py
+++ b/conversion_module.py
@@ -11,7 +11,8 @@ import subprocess
 import spf2sv_converter
 
 class Converter:
-    def __init__(self, source_path, dest_path, cpu_gen, use_itpp, progress_callback=None,stop_callback=None):
+    def __init__(self, source_path, dest_path, cpu_gen, use_itpp, progress_callback=None, stop_callback=None, completion_callback=None):
+        self.completion_callback = completion_callback
         self.source_path = source_path
         self.dest_path = dest_path
         self.cpu_gen = cpu_gen
@@ -21,73 +22,71 @@ class Converter:
         self.stop_callback = stop_callback
 
     def run_conversion(self):
-        #try:
-            if not os.path.exists(self.dest_path):
-                os.makedirs(self.dest_path)
+        if not os.path.exists(self.dest_path):
+            os.makedirs(self.dest_path)
 
-            if os.path.isdir(self.source_path):
-                files_ = os.listdir(self.source_path)
-                files = [file for file in files_ if file.lower().endswith('.spf')]
-                total_files = len(files)
-                for i, file in enumerate(files):
-                    if self.stop_callback():
-                        print("STOPPED !!!!")
-                        ## Open the destination folder after conversion
-                        if os.path.exists(self.dest_path):
-                            self.dest_path = self.dest_path.replace("/","\\")
-                            ## Open the folder using the default file manager
-                        if os.name == "nt":  # Windows
-                            subprocess.Popen(f'explorer "{self.dest_path}"')
-                        elif os.name == "posix":  ## Linux or macOS
-                            subprocess.Popen(["xdg-open", destination_entry.get()])
-                        progress = 0
-                        self.progress_callback(progress)
-                        return
-                    ## Folder conversion function here
-                    spf2sv_converter.run(
-                        direct_reg= self.use_itpp,
-                        conversion_time= self.conversion_time,
-                        log_file_path= os.path.join(self.dest_path, 'conversion_log.txt'),
-                        _week_folder_en= False,
-                        _input_dir= self.source_path,
-                        _input_file = os.path.join(self.source_path,file),
-                        _output_dir= self.dest_path,
-                        CPUgen= self.cpu_gen
-                    )
-                    if self.progress_callback:
-                        progress = int((i + 1) / total_files * 100)
-                        self.progress_callback(progress)
-            else:
-                ## File conversion function here
-                # Simulate conversion for a single file
+        if os.path.isdir(self.source_path):
+            files_ = os.listdir(self.source_path)
+            files = [file for file in files_ if file.lower().endswith('.spf')]
+            total_files = len(files)
+            for i, file in enumerate(files):
+                if self.stop_callback():
+                    print("STOPPED !!!!")
+                    ## Open the destination folder after conversion
+                    if os.path.exists(self.dest_path):
+                        self.dest_path = self.dest_path.replace("/","\\")
+                        ## Open the folder using the default file manager
+                    if os.name == "nt":  # Windows
+                        subprocess.Popen(f'explorer "{self.dest_path}"')
+                    elif os.name == "posix":  ## Linux or macOS
+                        subprocess.Popen(["xdg-open", destination_entry.get()])
+                    progress = 0
+                    self.progress_callback(progress)
+                    return
+                ## Folder conversion function here
                 spf2sv_converter.run(
-                        direct_reg= self.use_itpp,
-                        conversion_time= self.conversion_time,
-                        log_file_path= os.path.join(self.dest_path, 'conversion_log.txt'),
-                        _week_folder_en= False,
-                        _input_dir= os.path.dirname(self.source_path),
-                        _input_file = self.dest_path,
-                        _output_dir= self.dest_path,
-                        CPUgen= self.cpu_gen
-                    )
+                    direct_reg= self.use_itpp,
+                    conversion_time= self.conversion_time,
+                    log_file_path= os.path.join(self.dest_path, 'conversion_log.txt'),
+                    _week_folder_en= False,
+                    _input_dir= self.source_path,
+                    _input_file = os.path.join(self.source_path,file),
+                    _output_dir= self.dest_path,
+                    CPUgen= self.cpu_gen
+                )
                 if self.progress_callback:
-                    self.progress_callback(100)
-            
-            with open(os.path.join(self.dest_path, 'conversion_log.txt'), 'a') as f:
-                f.write(f"Source: {self.source_path}\n")
-                f.write(f"Destination: {self.dest_path}\n")
-                f.write(f"CPU Gen: {self.cpu_gen}\n")
-                f.write(f"Use ITPP Comments: {'Yes' if self.use_itpp else 'No'}\n")
-            print(f"Conversion completed for {self.source_path} to {self.dest_path}")
+                    progress = int((i + 1) / total_files * 100)
+                    self.progress_callback(progress)
+        else:
+            ## File conversion function here
+            # Simulate conversion for a single file
+            spf2sv_converter.run(
+                    direct_reg= self.use_itpp,
+                    conversion_time= self.conversion_time,
+                    log_file_path= os.path.join(self.dest_path, 'conversion_log.txt'),
+                    _week_folder_en= False,
+                    _input_dir= os.path.dirname(self.source_path),
+                    _input_file = self.source_path,
+                    _output_dir= self.dest_path,
+                    CPUgen= self.cpu_gen
+                )
+            if self.progress_callback:
+                self.progress_callback(100)
+        
+        with open(os.path.join(self.dest_path, 'conversion_log.txt'), 'a') as f:
+            f.write(f"Source: {self.source_path}\n")
+            f.write(f"Destination: {self.dest_path}\n")
+            f.write(f"CPU Gen: {self.cpu_gen}\n")
+            f.write(f"Use ITPP Comments: {'Yes' if self.use_itpp else 'No'}\n")
+        print(f"Conversion completed for {self.source_path} to {self.dest_path}")
 
-            ## Open the destination folder after conversion
-            if os.path.exists(self.dest_path):
-                self.dest_path = self.dest_path.replace("/","\\")
-                ## Open the folder using the default file manager
-                if os.name == "nt":  # Windows
-                    subprocess.Popen(f'explorer "{self.dest_path}"')
-                elif os.name == "posix":  ## Linux or macOS
-                    subprocess.Popen(["xdg-open", destination_entry.get()])
-
-        # except Exception as e:
-        #     print(f"Error during conversion: {e}")
+        ## Open the destination folder after conversion
+        if os.path.exists(self.dest_path):
+            self.dest_path = self.dest_path.replace("/","\\")
+            ## Open the folder using the default file manager
+            if os.name == "nt":  # Windows
+                subprocess.Popen(f'explorer "{self.dest_path}"')
+            elif os.name == "posix":  ## Linux or macOS
+                subprocess.Popen(["xdg-open", destination_entry.get()])
+        if self.completion_callback:
+                self.completion_callback()  # Call the completion callback at the end of the conversion
diff --git a/lnl_spf_2_pythonsv_script_BlackBox_Advanced.py b/lnl_spf_2_pythonsv_script_BlackBox_Advanced.py
index 1b20b91..15d7cf7 100644
--- a/lnl_spf_2_pythonsv_script_BlackBox_Advanced.py
+++ b/lnl_spf_2_pythonsv_script_BlackBox_Advanced.py
@@ -76,11 +76,11 @@ def context_search_and_print(string, directory, Context_size):
                         # The Line
                         print(number_helper_10000(i) + ">>",line,end="")
                         # 10 lines after
-                        for j in range(0,Context_size+1):
+                        for j in range(1,Context_size+1):
                             if i+j < len(lines):
                                 print(number_helper_10000(i+j+1) + ": ", lines[i+j],end="")
-                        input("Press Enter to continue...")
-                        exit()
+                        #input("Press Enter to continue...")
+                        return
 
 
 
@@ -333,10 +333,12 @@ class Command():
             for tap in taps:
                 try:
                     self.focus_tap_sv.append(self.focus_tap_dict[tap])
+                    self.taps_used.add(self.focus_tap_dict[tap])
                 except KeyError as e:
-                    print("Tap not found: " + str(e))
+                    print(" Tap not found: " + str(e))
                     context_search_and_print(tap, self.Root_Path, 10)
-                self.taps_used.add(self.focus_tap_dict[tap])
+                    return 1
+                
 
         elif row.startswith(r"set"):
             # if self.direct_reg == True:
@@ -790,6 +792,7 @@ class svReg():
         data_arr = bitfield2(data)
         if isinstance(fieldName, tuple):
             if len(fieldName) == 2:
+                index_len = fieldName[0] - fieldName[1] + 1
                 index = fieldName
             else:
                 bit_offset = getattr(self.regName,fieldName[0].split("[")[0]).info['bitOffset']
@@ -848,9 +851,10 @@ def runConverted():
             else:
                 while row.startswith(" "):
                     row = row[1:]
-            self.comp_command(row_num,row,output,spf_file)
+            if self.comp_command(row_num,row,output,spf_file):
+                return
         #self.printC1("\nrunConverted()",output)
-        end_string = ',Converted Successfully !'
+        end_string = ' ,Converted Successfully !'
         print (end_string)
         output.close()
 
diff --git a/ltk_spf_history.csv b/ltk_spf_history.csv
index db6aea2..9eb7a43 100644
--- a/ltk_spf_history.csv
+++ b/ltk_spf_history.csv
@@ -1,3 +1,3 @@
-
-C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/TCSS/all spfs
-C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/TCSS/all spfs\LTK_13-06-24_12-27-44,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/TCSS/all spfs\LTK_13-06-24_12-22-47,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/TCSS/all spfs\LTK_13-06-24_12-21-44,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/TCSS/all spfs\LTK_13-06-24_12-20-57,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/TCSS/all spfs\LTK_13-06-24_12-20-36,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/TCSS/all spfs\LTK_13-06-24_12-19-54,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/TCSS/all spfs\LTK_13-06-24_12-18-47,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/TCSS/all spfs\LTK_13-06-24_12-17-04
+C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/TCSS/all spfs/func_tc0_dp_anelb_10_20_lfsr31_sr.spf
+C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/PCIe5,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/TCSS/all spfs,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/CDPHY,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/HPTP
+C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/PCIe5\LTK_13-06-24_17-41-02,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/TCSS/all spfs\LTK_13-06-24_17-40-04,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/TCSS/all spfs\LTK_13-06-24_17-36-12,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/CDPHY\LTK_13-06-24_17-28-08,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/CDPHY\LTK_13-06-24_17-28-07,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/TCSS/all spfs\LTK_13-06-24_17-26-29,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/TCSS/all spfs\LTK_13-06-24_17-25-45,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/TCSS/all spfs\LTK_13-06-24_17-23-39,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/TCSS/all spfs\LTK_13-06-24_17-22-20,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/HPTP\LTK_13-06-24_16-42-45,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/HPTP\LTK_13-06-24_16-39-33,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/HPTP\LTK_13-06-24_16-38-51,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/HPTP\LTK_13-06-24_16-33-21,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/HPTP\LTK_13-06-24_16-32-49,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/HPTP\LTK_13-06-24_16-32-04,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/HPTP\LTK_13-06-24_16-27-45,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/HPTP\LTK_13-06-24_15-51-36,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/HPTP\LTK_13-06-24_15-50-51,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/HPTP\LTK_13-06-24_15-45-18,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/HPTP\LTK_13-06-24_15-43-20,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/HPTP\LTK_13-06-24_15-41-31,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/HPTP\LTK_13-06-24_15-33-57,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/HPTP\LTK_13-06-24_15-28-05,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/HPTP\LTK_13-06-24_15-14-01,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/HPTP\LTK_13-06-24_15-12-29,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/HPTP\LTK_13-06-24_15-05-09,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/HPTP\LTK_13-06-24_15-02-18,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/HPTP\LTK_13-06-24_15-00-07,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/HPTP\LTK_13-06-24_14-59-06,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/HPTP\LTK_13-06-24_14-58-11,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/HPTP\LTK_13-06-24_14-55-36,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/HPTP\LTK_13-06-24_14-51-19,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/CDPHY\LTK_13-06-24_14-36-20,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/CDPHY\LTK_13-06-24_14-34-50,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/CDPHY\LTK_13-06-24_14-30-52,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/CDPHY\LTK_13-06-24_14-28-10,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/CDPHY\LTK_13-06-24_14-27-22,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/CDPHY\LTK_13-06-24_14-26-38,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/CDPHY\LTK_13-06-24_14-24-44,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/CDPHY\LTK_13-06-24_14-21-22,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/CDPHY\LTK_13-06-24_14-20-04,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/CDPHY\LTK_13-06-24_14-18-53,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/CDPHY\LTK_13-06-24_14-15-54

commit 59e9893d6e0ca0ef7d549b8ccfb2d6757edf7126
Author: 12143054-C1 <sivan.zusin@intel.com>
Date:   Thu Jun 13 12:35:55 2024 +0300

    update to version 2.0.2: added progress bar and file support

diff --git a/LTK_SPF_Converter.py b/LTK_SPF_Converter.py
index 199c23c..9325c82 100644
--- a/LTK_SPF_Converter.py
+++ b/LTK_SPF_Converter.py
@@ -16,6 +16,8 @@ from datetime import datetime
 import threading
 from conversion_module import Converter
 
+VERSION = '2.0.2'
+
 
 class Converter_GUI():
     def __init__(self, root):
@@ -26,7 +28,7 @@ class Converter_GUI():
         # window top bar title
         self.root = root
         self.root.title("LTK SPF Converter")
-        self.root.minsize(1200, 260)  # Set the minimum window size
+        self.root.minsize(1200, 290)  # Set the minimum window size
 
         # Set the window icon
         self.set_window_icon()
@@ -44,7 +46,7 @@ class Converter_GUI():
         # Variable to hold the source type
         self.source_type = tk.StringVar(value='Folder')
         self.source_file_radiobutton = tk.Radiobutton(
-            self.source_frame, text="File", variable=self.source_type, value='file', command=self.update_combobox, state='disabled') ############### disabled in beta 1 release
+            self.source_frame, text="File", variable=self.source_type, value='File', command=self.update_combobox) ############### disabled in beta 1 release
         self.source_file_radiobutton.pack(side='left')
         self.source_folder_radiobutton = tk.Radiobutton(
             self.source_frame, text="Folder", variable=self.source_type, value='Folder', command=self.update_combobox)
@@ -80,7 +82,7 @@ class Converter_GUI():
 
         # Bottom Frame
         self.bottom_frame = tk.Frame(root)
-        self.bottom_frame.pack(fill='x', pady=5, padx=5)
+        self.bottom_frame.pack(fill='x', pady=5, padx=0)
 
         # Bottom Left frame - Options
         # make it a LabelFrame with the title 'Options'
@@ -92,7 +94,7 @@ class Converter_GUI():
         self.cpu_gen_label = tk.Label(self.spu_gen_frame, text="CPU Gen:")
         self.cpu_gen_label.pack(side='left', padx=5)
         self.cpu_gen = ttk.Combobox(self.spu_gen_frame, values=[
-                                    "PTL", "LNL", "MTL-P", "MTL1"])
+                                    "PTL", "LNL"])
         self.cpu_gen.pack(padx=5)
         self.cpu_gen.set("PTL")
         # add 'Use itpp Comments' tick button to options frame
@@ -105,21 +107,25 @@ class Converter_GUI():
         self.buttons_frame = tk.Frame(self.bottom_frame)
         self.buttons_frame.pack(side='right', padx=10)
         self.convert_button = tk.Button(
-            self.buttons_frame, text="Convert", command=self.convert)
-        self.convert_button.pack(side='right', padx=10)
-
-        # Progress Bar
+            self.buttons_frame, text="Convert", command=self.convert, width=7)
+        self.convert_button.pack(side='top', pady=2)
+        self.stop_requested = False
+        self.cancel_button = tk.Button(
+            self.buttons_frame, text="Cancel", command=self.stop_convertion ,width=7,state='disabled')
+        self.cancel_button.pack(side='top', pady=2)
+
+        # Progress Bar  ########################################################
         self.progress = tk.DoubleVar()
         self.progress_bar = ttk.Progressbar(
             root, variable=self.progress, maximum=100)
-        # self.progress_bar.pack(fill='x', padx=5, pady=5) progress bar not shown. WIP!
+        self.progress_bar.pack(fill='x', padx=5, pady=5)
 
         # Floor Frame
         self.floor_frame = tk.Frame(root)
         self.floor_frame.pack(fill='x', pady=5, padx=5, side='bottom', anchor='s')
 
         # Software Version
-        self.version_label = tk.Label(self.floor_frame, text="2.0.1b1")
+        self.version_label = tk.Label(self.floor_frame, text=VERSION)
         self.version_label.pack(side='left')
 
         # Copyright
@@ -145,9 +151,14 @@ class Converter_GUI():
 
     def update_source_history_on_select(self):
         selected = self.source_select_combobox.get()
+        history = ''
         if selected:
-            self.update_history(self.source_file_history if self.source_type.get(
-            ) == 'File' else self.source_folder_history, selected)
+            if self.source_type.get() == 'File' and os.path.isfile(selected):
+                history = self.source_file_history
+            elif self.source_type.get() == 'Folder' and os.path.isdir(selected):
+                history = self.source_folder_history
+            if history:
+                self.update_history(history, selected)
             self.update_combobox()  # Refresh the combobox with updated history
 
     def update_dest_history_on_select(self):
@@ -237,15 +248,15 @@ class Converter_GUI():
         # Function to handle file/folder selection
         if self.source_type.get() == 'File':
             file_path = filedialog.askopenfilename()
-            if file_path:
+            if os.path.isfile(file_path):
                 self.source_file_history.insert(
                     0, file_path)  # Update source file history
                 self.update_combobox()
                 self.source_select_combobox.set(file_path)
                 base_path = os.path.dirname(file_path)
-        else:
+        else: #if it's a Folder
             folder_path = filedialog.askdirectory()
-            if folder_path:
+            if os.path.isdir(folder_path):
                 self.source_folder_history.insert(
                     0, folder_path)  # Update source folder history
                 self.update_combobox()
@@ -342,12 +353,23 @@ class Converter_GUI():
         cpu_gen = self.cpu_gen.get()
         use_itpp = self.use_itpp.get()
 
-        # Create an instance of the Converter class
-        converter = Converter(source_path, dest_path, cpu_gen, use_itpp, self.progress_callback)
+        self.stop_requested = False
 
+        # Create an instance of the Converter class
+        converter = Converter(
+            source_path,
+            dest_path,
+            cpu_gen,
+            use_itpp,
+            self.progress_callback,
+            lambda: self.stop_requested
+            )
         # Run the conversion in a separate thread
-        conversion_thread = threading.Thread(target=converter.run_conversion)
-        conversion_thread.start()
+        self.conversion_thread = threading.Thread(target=converter.run_conversion)
+        self.conversion_thread.start()
+
+        self.cancel_button.configure(state='normal')
+        self.convert_button.configure(state='disabled')
 
         # Display conversion details
         messagebox.showinfo("Convert",  f"Convert button clicked.\n"
@@ -355,6 +377,12 @@ class Converter_GUI():
                                         f"Destination: {dest_path}\n"
                                         f"CPU Gen: {cpu_gen}\n"
                                         f"Use itpp Comments: {'Yes' if use_itpp else 'No'}")
+    
+    def stop_convertion(self):
+        self.stop_requested = True  # Signal the thread to stop
+        #self.conversion_thread.join()  # Wait for the thread to finish
+        self.cancel_button.configure(state='disabled')
+        self.convert_button.configure(state='normal')
 
 
 if __name__ == "__main__":
diff --git a/LTK_SPF_HELP.chw b/LTK_SPF_HELP.chw
index 2f06d44..eb9cbb7 100644
Binary files a/LTK_SPF_HELP.chw and b/LTK_SPF_HELP.chw differ
diff --git a/Release.py b/Release.py
index 24843e7..dbb7c0d 100644
--- a/Release.py
+++ b/Release.py
@@ -10,13 +10,20 @@ def validate_version(version_input):
     return re.match(pattern, version_input) is not None
 
 def main():
-    # Get the release version from user input
-    while True:
-        version_input = input("Enter the release version (format x.x.xY or x.x.x): ").strip()
-        if validate_version(version_input):
-            break
-        else:
-            print("Invalid version format. Please enter a valid version.")
+    USER_INPUT = False
+    if USER_INPUT:
+        # Get the release version from user input
+        while True:
+            version_number = input("Enter the release version (format x.x.xY or x.x.x): ").strip()
+            if validate_version(version_number):
+                break
+            else:
+                print("Invalid version format. Please enter a valid version.")
+    else:
+        with open(r'LTK_SPF_Converter.py','r') as source:
+            for line in source:
+                if line.startswith('VERSION = '):
+                    version_number = line.split(' ')[-1].strip().strip("'")
 
     # Get the current working directory
     base_dir = os.path.dirname(os.path.abspath(__file__))
@@ -29,7 +36,7 @@ def main():
     script_path = os.path.join(base_dir, f"{module_name}.py")
 
     # Define the output directory relative to the current directory
-    output_dir = os.path.join(base_dir, "Release", f"{module_name}_{version_input}")
+    output_dir = os.path.join(base_dir, "Release", f"{module_name}_{version_number}")
 
     # Create the output directory if it doesn't exist
     os.makedirs(output_dir, exist_ok=True)
@@ -40,7 +47,10 @@ def main():
     # Copy additional files to the output directory
     shutil.copy(icon_path, output_dir)
     shutil.copy(help_file, output_dir)
-    shutil.copy(history_file, output_dir)
+
+    # Create empty history file
+    with open(os.path.join(output_dir,"ltk_spf_history.csv"),'w') as h:
+        pass
 
     # Delete the .spec file and the build folder
     spec_file = os.path.join(base_dir, f"{module_name}.spec")
diff --git a/USE_EXAMPLE.py b/USE_EXAMPLE.py
index 0aac0e5..0f20246 100644
--- a/USE_EXAMPLE.py
+++ b/USE_EXAMPLE.py
@@ -6,7 +6,7 @@
 #              conversion time, and an optional CPU generation parameter.
 #############################
 
-def use_example(direct_reg,input_dir,output_dir,week_folder_en,log_file_path,conversion_time,CPUgen='PTL'):
+def use_example(direct_reg,input_dir,_input_file,output_dir,week_folder_en,log_file_path,conversion_time,CPUgen='PTL'):
     import os,sys
     import sys
     #sys.path.append(os.getcwd())
@@ -14,4 +14,4 @@ def use_example(direct_reg,input_dir,output_dir,week_folder_en,log_file_path,con
     # input_dir  = r"C:\pythonsv\atdio\sio\LNL\sio_dv\spfs_source\ww22_2'23\ILB_eDP_eDP"             # r"C:\pythonsv\lunarlake\debug\domains\sio_dv\spfs_source\9_1" #
     # output_dir = r"C:\pythonsv\atdio\sio\LNL\sio_dv\spfs_pysv_ready"             # r"C:\pythonsv\lunarlake\debug\domains\sio_dv\spfs_pysv_ready\Current" # r"C:\Scripts\spf conversion sandbox\output lib"
     print(f"input_dir= {input_dir}\noutput_dir= {output_dir}\nweek_folder_en= {week_folder_en}\ndirect_reg= {direct_reg}\n")
-    spf2sv_converter.run(direct_reg,conversion_time,log_file_path,week_folder_en,input_dir,output_dir,CPUgen=CPUgen)
+    spf2sv_converter.run(direct_reg,conversion_time,log_file_path,week_folder_en,input_dir,_input_file,output_dir,CPUgen=CPUgen)
diff --git a/__pycache__/USE_EXAMPLE.cpython-310.pyc b/__pycache__/USE_EXAMPLE.cpython-310.pyc
index 43ea5bd..0f6752a 100644
Binary files a/__pycache__/USE_EXAMPLE.cpython-310.pyc and b/__pycache__/USE_EXAMPLE.cpython-310.pyc differ
diff --git a/__pycache__/conversion_module.cpython-310.pyc b/__pycache__/conversion_module.cpython-310.pyc
index 8da614c..ef1c961 100644
Binary files a/__pycache__/conversion_module.cpython-310.pyc and b/__pycache__/conversion_module.cpython-310.pyc differ
diff --git a/__pycache__/lnl_spf_2_pythonsv_script_BlackBox_Advanced.cpython-310.pyc b/__pycache__/lnl_spf_2_pythonsv_script_BlackBox_Advanced.cpython-310.pyc
index fba552a..fbcd187 100644
Binary files a/__pycache__/lnl_spf_2_pythonsv_script_BlackBox_Advanced.cpython-310.pyc and b/__pycache__/lnl_spf_2_pythonsv_script_BlackBox_Advanced.cpython-310.pyc differ
diff --git a/__pycache__/spf2sv_converter.cpython-310.pyc b/__pycache__/spf2sv_converter.cpython-310.pyc
index 89ec9b4..992fa80 100644
Binary files a/__pycache__/spf2sv_converter.cpython-310.pyc and b/__pycache__/spf2sv_converter.cpython-310.pyc differ
diff --git a/conversion_module.py b/conversion_module.py
index c6e1107..5e1fa51 100644
--- a/conversion_module.py
+++ b/conversion_module.py
@@ -8,16 +8,17 @@
 import os
 import time
 import subprocess
-import USE_EXAMPLE as ue
+import spf2sv_converter
 
 class Converter:
-    def __init__(self, source_path, dest_path, cpu_gen, use_itpp, progress_callback=None):
+    def __init__(self, source_path, dest_path, cpu_gen, use_itpp, progress_callback=None,stop_callback=None):
         self.source_path = source_path
         self.dest_path = dest_path
         self.cpu_gen = cpu_gen
         self.use_itpp = use_itpp
         self.progress_callback = progress_callback
         self.conversion_time = time.time()
+        self.stop_callback = stop_callback
 
     def run_conversion(self):
         #try:
@@ -25,26 +26,50 @@ class Converter:
                 os.makedirs(self.dest_path)
 
             if os.path.isdir(self.source_path):
-                files = os.listdir(self.source_path)
+                files_ = os.listdir(self.source_path)
+                files = [file for file in files_ if file.lower().endswith('.spf')]
                 total_files = len(files)
-                # for i, file in enumerate(files):   ############### loop disabled in beta 1 release
-                for i in [0]:
+                for i, file in enumerate(files):
+                    if self.stop_callback():
+                        print("STOPPED !!!!")
+                        ## Open the destination folder after conversion
+                        if os.path.exists(self.dest_path):
+                            self.dest_path = self.dest_path.replace("/","\\")
+                            ## Open the folder using the default file manager
+                        if os.name == "nt":  # Windows
+                            subprocess.Popen(f'explorer "{self.dest_path}"')
+                        elif os.name == "posix":  ## Linux or macOS
+                            subprocess.Popen(["xdg-open", destination_entry.get()])
+                        progress = 0
+                        self.progress_callback(progress)
+                        return
                     ## Folder conversion function here
-                    ue.use_example(
-                        self.use_itpp,
-                        self.source_path,
-                        self.dest_path,
-                        False,
-                        os.path.join(self.dest_path, 'conversion_log.txt'),
-                        self.conversion_time,
-                        self.cpu_gen)
+                    spf2sv_converter.run(
+                        direct_reg= self.use_itpp,
+                        conversion_time= self.conversion_time,
+                        log_file_path= os.path.join(self.dest_path, 'conversion_log.txt'),
+                        _week_folder_en= False,
+                        _input_dir= self.source_path,
+                        _input_file = os.path.join(self.source_path,file),
+                        _output_dir= self.dest_path,
+                        CPUgen= self.cpu_gen
+                    )
                     if self.progress_callback:
                         progress = int((i + 1) / total_files * 100)
                         self.progress_callback(progress)
             else:
                 ## File conversion function here
                 # Simulate conversion for a single file
-                time.sleep(0.1)  # Simulating a long-running process
+                spf2sv_converter.run(
+                        direct_reg= self.use_itpp,
+                        conversion_time= self.conversion_time,
+                        log_file_path= os.path.join(self.dest_path, 'conversion_log.txt'),
+                        _week_folder_en= False,
+                        _input_dir= os.path.dirname(self.source_path),
+                        _input_file = self.dest_path,
+                        _output_dir= self.dest_path,
+                        CPUgen= self.cpu_gen
+                    )
                 if self.progress_callback:
                     self.progress_callback(100)
             
diff --git a/ltk_spf_history.csv b/ltk_spf_history.csv
index 5d97d0a..db6aea2 100644
--- a/ltk_spf_history.csv
+++ b/ltk_spf_history.csv
@@ -1,3 +1,3 @@
-C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/TCSS/cmem_tc0_dp_anelb_1p62_lfsr31.spf,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/TCSS/cmem_tc0_dp_extlb_10_lfsr31.spf
-C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/TCSS/all spfs,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/TCSS,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/CDPHY,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/TCSS
-C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/TCSS/all spfs\LTK_09-06-24_17-08-03,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/TCSS/all spfs\LTK_09-06-24_16-40-08,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/TCSS/all spfs\LTK_09-06-24_16-37-47,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/TCSS/all spfs\LTK_09-06-24_14-48-19,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/TCSS/all spfs\LTK_09-06-24_13-56-49,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/TCSS/all spfs\LTK_09-06-24_13-54-26,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/TCSS/all spfs\LTK_09-06-24_13-53-15,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/TCSS/all spfs\LTK_09-06-24_13-46-34,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/TCSS/all spfs\LTK_09-06-24_13-40-43,C:\Users\szusin\OneDrive - Intel Corporation\Documents\PTL\SPFs\TCSS\all spfs\LTK_09-06-24_13-36-31,C:\Users\szusin\OneDrive - Intel Corporation\Documents\PTL\SPFs\TCSS\all spfs\LTK_09-06-24_13-26-13,C:\Users\szusin\OneDrive - Intel Corporation\Documents\PTL\SPFs\TCSS\all spfs\LTK_09-06-24_13-19-43,C:\Users\szusin\OneDrive - Intel Corporation\Documents\PTL\SPFs\TCSS\all spfs\LTK_09-06-24_13-17-38,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/TCSS\LTK_09-06-24_13-02-45,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/TCSS\LTK_09-06-24_12-56-52,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/TCSS\LTK_09-06-24_12-53-35,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/TCSS\LTK_09-06-24_12-49-20,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/TCSS\LTK_09-06-24_12-37-20,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/TCSS\LTK_09-06-24_12-35-20,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/TCSS\LTK_09-06-24_12-31-36,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/TCSS\LTK_09-06-24_12-21-34,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/TCSS\LTK_09-06-24_12-20-18,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/TCSS\LTK_09-06-24_12-13-26,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/CDPHY\LTK_02-06-24_10-17-15,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/CDPHY\LTK_30-05-24_18-16-42,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/CDPHY\LTK_30-05-24_18-16-11,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/CDPHY\LTK_30-05-24_18-15-47,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/CDPHY\LTK_30-05-24_17-45-14,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/CDPHY\LTK_30-05-24_17-40-02,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/CDPHY\LTK_30-05-24_17-36-10,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/CDPHY\LTK_30-05-24_16-13-04,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/CDPHY\LTK_30-05-24_15-18-44,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/CDPHY\LTK_26-05-24_15-11-51,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/CDPHY\LTK_26-05-24_15-10-54,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/CDPHY\LTK_26-05-24_15-05-49,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/TCSS\LTK_26-05-24_12-47-42,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/TCSS\LTK_26-05-24_12-39-12,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/TCSS\LTK_26-05-24_12-26-03,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/TCSS\LTK_26-05-24_12-20-46,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/TCSS\LTK_26-05-24_12-18-31,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/TCSS\LTK_25-05-24_18-39-37,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/TCSS\LTK_25-05-24_18-40-04
+
+C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/TCSS/all spfs
+C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/TCSS/all spfs\LTK_13-06-24_12-27-44,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/TCSS/all spfs\LTK_13-06-24_12-22-47,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/TCSS/all spfs\LTK_13-06-24_12-21-44,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/TCSS/all spfs\LTK_13-06-24_12-20-57,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/TCSS/all spfs\LTK_13-06-24_12-20-36,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/TCSS/all spfs\LTK_13-06-24_12-19-54,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/TCSS/all spfs\LTK_13-06-24_12-18-47,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/TCSS/all spfs\LTK_13-06-24_12-17-04
diff --git a/spf2sv_converter.py b/spf2sv_converter.py
index 0ed516b..be7e931 100644
--- a/spf2sv_converter.py
+++ b/spf2sv_converter.py
@@ -21,7 +21,7 @@ def week_num():
     date_format = "ww{}_{:d}'{}".format(work_week, week_day, year)
     return date_format
 
-def tcss_add_phy_index_and_post_boot(output_dir,conversion_time,CPUgen):
+def tcss_add_phy_index_and_post_boot(file_path_,output_dir,conversion_time,CPUgen):
     def rewrite_file(file):
         lines = file.readlines()
         i=0
@@ -98,12 +98,20 @@ def tcss_add_phy_index_and_post_boot(output_dir,conversion_time,CPUgen):
         index='3'
                 """
         lines.insert(i+1,parameters_select)
-        for line_num, line in enumerate(lines):
-            lines[line_num] = lines[line_num].replace("(sv.socket0.soc.taps.dfx_par_iom_taplinknw_phy_fia_0_cdu_apollo0.taplinkcfg","(path_to_cdu_apollo_taplinkcfg")
-            lines[line_num] = lines[line_num].replace('("kill_mg0_tap0_tclk_out"',r'("kill_mg%s_tap0_tclk_out"%mg_index')
-            lines[line_num] = lines[line_num].replace('(sv.socket0.soc.taps.dfx_par_iom_taplinknw_phy_fia_0_cdu_apollo0.usb4_phy_common_reg','(path_to_cdu_apollo_usb4_phy_common_reg')
-            lines[line_num] = lines[line_num].replace('(sv.socket0.soc.taps.dfx_par_iom_taplinknw_phy_fia_0_mg0_tap0.crsel','(path_to_mg_tap_crsel')
-            lines[line_num] = lines[line_num].replace('"TCSS/soc_regs_wrapper/tcss_phy_env_i_0','f"TCSS/soc_regs_wrapper/tcss_phy_env_i_{str(phy_index)}')
+        if CPUgen == 'LNL':
+            for line_num, line in enumerate(lines):
+                lines[line_num] = lines[line_num].replace("(sv.socket0.soc.taps.dfx_par_iom_taplinknw_phy_fia_0_cdu_apollo0.taplinkcfg","(path_to_cdu_apollo_taplinkcfg")
+                lines[line_num] = lines[line_num].replace('("kill_mg0_tap0_tclk_out"',r'("kill_mg%s_tap0_tclk_out"%mg_index')
+                lines[line_num] = lines[line_num].replace('(sv.socket0.soc.taps.dfx_par_iom_taplinknw_phy_fia_0_cdu_apollo0.usb4_phy_common_reg','(path_to_cdu_apollo_usb4_phy_common_reg')
+                lines[line_num] = lines[line_num].replace('(sv.socket0.soc.taps.dfx_par_iom_taplinknw_phy_fia_0_mg0_tap0.crsel','(path_to_mg_tap_crsel')
+                lines[line_num] = lines[line_num].replace('"TCSS/soc_regs_wrapper/tcss_phy_env_i_0','f"TCSS/soc_regs_wrapper/tcss_phy_env_i_{str(phy_index)}')
+        elif CPUgen == 'PTL':
+            for line_num, line in enumerate(lines):
+                lines[line_num] = lines[line_num].replace("(sv.socket0.soc.taps.dfx_par_iom_taplinknw_phy_fia_0_cdu_apollo0.taplinkcfg","(path_to_cdu_apollo_taplinkcfg")
+                lines[line_num] = lines[line_num].replace('("kill_mg0_tap0_tclk_out"',r'("kill_mg%s_tap0_tclk_out"%mg_index')
+                lines[line_num] = lines[line_num].replace('(sv.socket0.soc.taps.dfx_par_iom_taplinknw_phy_fia_0_cdu_apollo0.usb4_phy_common_reg','(path_to_cdu_apollo_usb4_phy_common_reg')
+                lines[line_num] = lines[line_num].replace('(sv.socket0.soc.taps.dfx_par_iom_taplinknw_phy_fia_0_mg00.crsel','(path_to_mg_tap_crsel')
+                lines[line_num] = lines[line_num].replace('"TCSS/soc_regs_wrapper/tcss_phy_env_i_0','f"TCSS/soc_regs_wrapper/tcss_phy_env_i_{str(phy_index)}')
 
         file.close()
         #file_path1 = file_path.replace('.py','_CONVERTED.py')
@@ -121,7 +129,8 @@ def tcss_add_phy_index_and_post_boot(output_dir,conversion_time,CPUgen):
 
     folder_path = output_dir
     # get all files in the folder
-    files = list_files_in_folder(folder_path)
+    #files = list_files_in_folder(folder_path)  ### LEGACY
+    files = [file_path_]
     # filter files based on their name pattern
     pattern = r".*tc.*\.py$"
     files_to_process = [f for f in files if re.match(pattern, f)]
@@ -135,7 +144,7 @@ def tcss_add_phy_index_and_post_boot(output_dir,conversion_time,CPUgen):
             print("tcss post boot script added on: %s"%file_path)
     print("tcss_add_phy_index_and_post_boot DONE")
 
-def edp_add_post_boot(output_dir,conversion_time,CPUgen):
+def edp_add_post_boot(file_path_,output_dir,conversion_time,CPUgen):
     def rewrite_file(file):
         lines = file.readlines()
         i=0
@@ -180,7 +189,8 @@ def edp_add_post_boot(output_dir,conversion_time,CPUgen):
 
     folder_path = output_dir
     # get all files in the folder
-    files = list_files_in_folder(folder_path)
+    # files = list_files_in_folder(folder_path) ### LEGACY
+    files = [file_path_]
     # filter files based on their name pattern
     pattern = r".*eDP.*\.py$"
     files_to_process = [f for f in files if re.match(pattern, f)]
@@ -206,7 +216,10 @@ class run():
         CPUgen can be ['LNL' , 'MTL-P']
     """
 
-    def __init__(self,direct_reg,conversion_time,log_file_path,_week_folder_en, _input_dir, _output_dir="",CPUgen = "PTL"):
+    def __init__(self,direct_reg,conversion_time,log_file_path,_week_folder_en, _input_dir,_input_file, _output_dir="",CPUgen = "PTL"):
+        self.log_file_path = log_file_path
+        self.conversion_time = conversion_time
+        self.input_file = _input_file
         self.input_dir = _input_dir
         if _output_dir == "":
             self.output_dir = _input_dir + "\\TRANSLATED"
@@ -217,13 +230,8 @@ class run():
         self.CPUgen = CPUgen
         self.direct_reg = direct_reg
         self.run_translation()
-        print('') # prints newline seperator
-        tcss_add_phy_index_and_post_boot(self.output_dir,conversion_time,self.CPUgen)
-        print('') # prints newline seperator
-        edp_add_post_boot(self.output_dir,conversion_time,self.CPUgen)
-        print('') # prints newline seperator
-        print(log_file_path)
-
+        tcss_add_phy_index_and_post_boot(_input_file,self.output_dir,self.conversion_time,self.CPUgen)
+        edp_add_post_boot(_input_file,self.output_dir,self.conversion_time,self.CPUgen)
 
     def run_translation(self):
         # root_dirs = [ r"C:\pythonsv\lunarlake\debug\domains\hsio_dv\Display",
@@ -246,14 +254,17 @@ class run():
         #sys.path.append(r"C:\hamo_git\sio\LNL\sio_dv\spfs_source")
         import lnl_spf_2_pythonsv_script_BlackBox_Advanced as C1converter
 
-
-        # use the os.walk() function to traverse the directory tree
-        for dir_path, subdirs, files in os.walk(self.input_dir):
-            # loop through all the files in the current directory
-            for file_name in files:
-                # use the os.path.join() function to get the full path to the file
-                file_path = os.path.join(dir_path, file_name)
-                A = C1converter.Command(self.input_dir, file_path, self.output_dir, self.CPUgen, self.direct_reg)
-                # taps = list(A.returnTapsUsed())
-                # taps.insert(0,file_name)
-                # writer.writerow(taps)
+        if self.input_file:
+            input_dir = os.path.dirname(self.input_file)
+            A = C1converter.Command(input_dir, self.input_file, self.output_dir, self.CPUgen, self.direct_reg)
+        else:
+            # use the os.walk() function to traverse the directory tree
+            for dir_path, subdirs, files in os.walk(self.input_dir):
+                # loop through all the files in the current directory
+                for file_name in files:
+                    # use the os.path.join() function to get the full path to the file
+                    file_path = os.path.join(dir_path, file_name)
+                    A = C1converter.Command(self.input_dir, file_path, self.output_dir, self.CPUgen, self.direct_reg)
+                    # taps = list(A.returnTapsUsed())
+                    # taps.insert(0,file_name)
+                    # writer.writerow(taps)

commit 9821ac1692763bf4b1acb086dd325495afdbe99c
Author: 12143054-C1 <sivan.zusin@intel.com>
Date:   Sun Jun 9 18:16:36 2024 +0300

    updated PTL taps

diff --git a/__pycache__/conversion_module.cpython-310.pyc b/__pycache__/conversion_module.cpython-310.pyc
index 0cd7c7c..8da614c 100644
Binary files a/__pycache__/conversion_module.cpython-310.pyc and b/__pycache__/conversion_module.cpython-310.pyc differ
diff --git a/__pycache__/lnl_spf_2_pythonsv_script_BlackBox_Advanced.cpython-310.pyc b/__pycache__/lnl_spf_2_pythonsv_script_BlackBox_Advanced.cpython-310.pyc
index ef0fda5..fba552a 100644
Binary files a/__pycache__/lnl_spf_2_pythonsv_script_BlackBox_Advanced.cpython-310.pyc and b/__pycache__/lnl_spf_2_pythonsv_script_BlackBox_Advanced.cpython-310.pyc differ
diff --git a/__pycache__/spf2sv_converter.cpython-310.pyc b/__pycache__/spf2sv_converter.cpython-310.pyc
index 2a17229..89ec9b4 100644
Binary files a/__pycache__/spf2sv_converter.cpython-310.pyc and b/__pycache__/spf2sv_converter.cpython-310.pyc differ
diff --git a/conversion_module.py b/conversion_module.py
index 71cdf20..c6e1107 100644
--- a/conversion_module.py
+++ b/conversion_module.py
@@ -20,7 +20,7 @@ class Converter:
         self.conversion_time = time.time()
 
     def run_conversion(self):
-        try:
+        #try:
             if not os.path.exists(self.dest_path):
                 os.makedirs(self.dest_path)
 
@@ -64,5 +64,5 @@ class Converter:
                 elif os.name == "posix":  ## Linux or macOS
                     subprocess.Popen(["xdg-open", destination_entry.get()])
 
-        except Exception as e:
-            print(f"Error during conversion: {e}")
+        # except Exception as e:
+        #     print(f"Error during conversion: {e}")
diff --git a/lnl_spf_2_pythonsv_script_BlackBox_Advanced.py b/lnl_spf_2_pythonsv_script_BlackBox_Advanced.py
index b95f48c..1b20b91 100644
--- a/lnl_spf_2_pythonsv_script_BlackBox_Advanced.py
+++ b/lnl_spf_2_pythonsv_script_BlackBox_Advanced.py
@@ -184,9 +184,23 @@ class Command():
                 }
         elif self.CPU_Gen == "PTL":
             self.focus_tap_dict = {
-                r'DFX_PARISCLK_STAP' : r'soc.taps.dfx_parisclk.',
-                r'IPU_STAP'          : r'soc.taps.ipu.',
-                r'ISCLK_STAP'        : r'soc.taps.isclk.',
+                r'DFX_PARISCLK_STAP'                               : r'soc.taps.dfx_parisclk.',
+                r'IPU_STAP'                                        : r'soc.taps.ipu.',
+                r'ISCLK_STAP'                                      : r'soc.taps.isclk.',
+                r'DFX_PAR_IOM_TAPLINKNW_PHY_FIA_0_MG0_TAP0'        : r'soc.taps.dfx_par_iom_taplinknw_phy_fia_0_mg00.',
+                r'DFX_PAR_IOM_TAPLINKNW_PHY_FIA_0_MG1_TAP0'        : r'soc.taps.dfx_par_iom_taplinknw_phy_fia_0_mg10.',
+                r'DFX_PAR_IOM_TAPLINKNW_PHY_FIA_1_MG0_TAP0'        : r'soc.taps.dfx_par_iom_taplinknw_phy_fia_1_mg00.',
+                r'DFX_PAR_IOM_TAPLINKNW_PHY_FIA_1_MG1_TAP0'        : r'soc.taps.dfx_par_iom_taplinknw_phy_fia_1_mg10.',
+                r'DFX_PAR_IOM_TAPLINKNW_PHY_FIA_0_CDU_APOLLO0_TAP' : r'soc.taps.dfx_par_iom_taplinknw_phy_fia_0_cdu_apollo0.',
+                r'DFX_PAR_IOM_TAPLINKNW_PHY_FIA_0_CDU_APOLLO1_TAP' : r'soc.taps.dfx_par_iom_taplinknw_phy_fia_0_cdu_apollo1.',
+                r'DFX_PAR_IOM_TAPLINKNW_PHY_FIA_1_CDU_APOLLO0_TAP' : r'soc.taps.dfx_par_iom_taplinknw_phy_fia_1_cdu_apollo0.',
+                r'DFX_PAR_IOM_TAPLINKNW_PHY_FIA_1_CDU_APOLLO1_TAP' : r'soc.taps.dfx_par_iom_taplinknw_phy_fia_1_cdu_apollo1.',
+                r'TPSB_STAP'                                       : r'soc.taps.tpsb.',
+                r'DFX_PAR_IOM_TAPLINKNW_IOM_IOM_AONGTAP'           : r'soc.taps.dfx_par_iom_taplinknw_iom_iom_aong.',
+                r'GLUE_DFX_PAR_IOM_TAPLINKNW_PHY_FIA_0_MG0_TAP0'   : r'soc.taps.cltap.', #### !!!!!! IN QUESTION NEED TO APPROVE WITH MITRANI
+                r'GLUE_DFX_PAR_IOM_TAPLINKNW_PHY_FIA_0_MG1_TAP0'   : r'soc.taps.cltap.', #### !!!!!! IN QUESTION NEED TO APPROVE WITH MITRANI
+                r'GLUE_DFX_PAR_IOM_TAPLINKNW_PHY_FIA_1_MG0_TAP0'   : r'soc.taps.cltap.', #### !!!!!! IN QUESTION NEED TO APPROVE WITH MITRANI
+                r'GLUE_DFX_PAR_IOM_TAPLINKNW_PHY_FIA_1_MG1_TAP0'   : r'soc.taps.cltap.', #### !!!!!! IN QUESTION NEED TO APPROVE WITH MITRANI
                 }
             ### I M P O R T A N T !!!!!!!! YOU NEED TO ADD '.' AT THE END OF THE TRANSLATED TAP NAME, AND ALSO PAY ATTENTION TO THE FIRST ELEMENT IN THE HIERARCHY.
         self.taps_used = set()
@@ -310,7 +324,12 @@ class Command():
             # Set focus tap. goes to: sv.socket0.soc.taps.<focus_tap_sv>.register
             self.focus_tap_sv = []
             taps = row.replace("focus_tap ","").split(";")[0]
-            taps = taps.split()
+            if " " in taps:
+                taps = taps.split(" ")
+            elif "," in taps:
+                taps = taps.split(",")
+            else:
+                taps = [taps]
             for tap in taps:
                 try:
                     self.focus_tap_sv.append(self.focus_tap_dict[tap])
@@ -380,7 +399,10 @@ class Command():
                     self.printC1("reg{0} = svReg({1})".format(tap,self.full_reg_name),output)
                         
             ##get the indexes of the bits we want to write
-            data = "0" + row.split("=")[1].split(";")[0].split(r"'")[1].replace("h","x")
+            if "'b" in row or "'h" in row:
+                data = "0" + row.split("=")[1].split(";")[0].split(r"'")[1].replace("h","x")
+            else: 
+                data = hex(int(row.split("=")[1].split(";")[0]))
             if "[" in row.split(r"#")[0].split(r"=")[0]:
                 indexes = row.split("[")[1].split("]")[0]
                 if ":" in indexes:
diff --git a/ltk_spf_history.csv b/ltk_spf_history.csv
index 4c39406..5d97d0a 100644
--- a/ltk_spf_history.csv
+++ b/ltk_spf_history.csv
@@ -1,3 +1,3 @@
 C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/TCSS/cmem_tc0_dp_anelb_1p62_lfsr31.spf,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/TCSS/cmem_tc0_dp_extlb_10_lfsr31.spf
-C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/CDPHY,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/TCSS
-C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/CDPHY\LTK_02-06-24_10-17-15,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/CDPHY\LTK_30-05-24_18-16-42,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/CDPHY\LTK_30-05-24_18-16-11,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/CDPHY\LTK_30-05-24_18-15-47,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/CDPHY\LTK_30-05-24_17-45-14,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/CDPHY\LTK_30-05-24_17-40-02,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/CDPHY\LTK_30-05-24_17-36-10,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/CDPHY\LTK_30-05-24_16-13-04,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/CDPHY\LTK_30-05-24_15-18-44,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/CDPHY\LTK_26-05-24_15-11-51,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/CDPHY\LTK_26-05-24_15-10-54,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/CDPHY\LTK_26-05-24_15-05-49,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/TCSS\LTK_26-05-24_12-47-42,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/TCSS\LTK_26-05-24_12-39-12,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/TCSS\LTK_26-05-24_12-26-03,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/TCSS\LTK_26-05-24_12-20-46,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/TCSS\LTK_26-05-24_12-18-31,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/TCSS\LTK_25-05-24_18-39-37,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/TCSS\LTK_25-05-24_18-40-04
+C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/TCSS/all spfs,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/TCSS,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/CDPHY,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/TCSS
+C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/TCSS/all spfs\LTK_09-06-24_17-08-03,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/TCSS/all spfs\LTK_09-06-24_16-40-08,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/TCSS/all spfs\LTK_09-06-24_16-37-47,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/TCSS/all spfs\LTK_09-06-24_14-48-19,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/TCSS/all spfs\LTK_09-06-24_13-56-49,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/TCSS/all spfs\LTK_09-06-24_13-54-26,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/TCSS/all spfs\LTK_09-06-24_13-53-15,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/TCSS/all spfs\LTK_09-06-24_13-46-34,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/TCSS/all spfs\LTK_09-06-24_13-40-43,C:\Users\szusin\OneDrive - Intel Corporation\Documents\PTL\SPFs\TCSS\all spfs\LTK_09-06-24_13-36-31,C:\Users\szusin\OneDrive - Intel Corporation\Documents\PTL\SPFs\TCSS\all spfs\LTK_09-06-24_13-26-13,C:\Users\szusin\OneDrive - Intel Corporation\Documents\PTL\SPFs\TCSS\all spfs\LTK_09-06-24_13-19-43,C:\Users\szusin\OneDrive - Intel Corporation\Documents\PTL\SPFs\TCSS\all spfs\LTK_09-06-24_13-17-38,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/TCSS\LTK_09-06-24_13-02-45,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/TCSS\LTK_09-06-24_12-56-52,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/TCSS\LTK_09-06-24_12-53-35,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/TCSS\LTK_09-06-24_12-49-20,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/TCSS\LTK_09-06-24_12-37-20,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/TCSS\LTK_09-06-24_12-35-20,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/TCSS\LTK_09-06-24_12-31-36,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/TCSS\LTK_09-06-24_12-21-34,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/TCSS\LTK_09-06-24_12-20-18,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/TCSS\LTK_09-06-24_12-13-26,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/CDPHY\LTK_02-06-24_10-17-15,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/CDPHY\LTK_30-05-24_18-16-42,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/CDPHY\LTK_30-05-24_18-16-11,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/CDPHY\LTK_30-05-24_18-15-47,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/CDPHY\LTK_30-05-24_17-45-14,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/CDPHY\LTK_30-05-24_17-40-02,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/CDPHY\LTK_30-05-24_17-36-10,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/CDPHY\LTK_30-05-24_16-13-04,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/CDPHY\LTK_30-05-24_15-18-44,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/CDPHY\LTK_26-05-24_15-11-51,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/CDPHY\LTK_26-05-24_15-10-54,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/CDPHY\LTK_26-05-24_15-05-49,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/TCSS\LTK_26-05-24_12-47-42,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/TCSS\LTK_26-05-24_12-39-12,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/TCSS\LTK_26-05-24_12-26-03,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/TCSS\LTK_26-05-24_12-20-46,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/TCSS\LTK_26-05-24_12-18-31,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/TCSS\LTK_25-05-24_18-39-37,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/TCSS\LTK_25-05-24_18-40-04
diff --git a/spf2sv_converter.py b/spf2sv_converter.py
index 21e8f0f..0ed516b 100644
--- a/spf2sv_converter.py
+++ b/spf2sv_converter.py
@@ -21,7 +21,7 @@ def week_num():
     date_format = "ww{}_{:d}'{}".format(work_week, week_day, year)
     return date_format
 
-def tcss_add_phy_index_and_post_boot(output_dir,conversion_time):
+def tcss_add_phy_index_and_post_boot(output_dir,conversion_time,CPUgen):
     def rewrite_file(file):
         lines = file.readlines()
         i=0
@@ -32,7 +32,8 @@ def tcss_add_phy_index_and_post_boot(output_dir,conversion_time):
                 lines[i] = 'def runConverted(phy_index=0, post_boot_config = True):\n'
                 break
             i+=1
-        parameters_select="""
+        if CPUgen == 'LNL':
+            parameters_select="""
     if post_boot_config:
         print("\\npost_boot_config - start")
         sv.socket0.soc.pmc.pmu.dfx_tcss_ctl.drv_tcss_hvmmode_en = 1
@@ -59,7 +60,43 @@ def tcss_add_phy_index_and_post_boot(output_dir,conversion_time):
         path_to_tcss_phy_env = sv.socket0.soc.tcss.soc_regs_wrapper.tcss_phy_env_i_2
         mg_index='0'
         index='2'
-            """
+                """
+        elif CPUgen == 'PTL':
+            parameters_select="""
+    if post_boot_config:
+        print("\\npost_boot_config - start")
+        sv.socket0.soc.pmc.pmu.dfx_tcss_ctl.drv_tcss_hvmmode_en = 1
+        print("\\npost_boot_config - end")
+
+    if phy_index == 0:
+        path_to_cdu_apollo_taplinkcfg = sv.socket0.soc.taps.dfx_par_iom_taplinknw_phy_fia_0_cdu_apollo0.taplinkcfg
+        path_to_cdu_apollo_usb4_phy_common_reg = sv.socket0.soc.taps.dfx_par_iom_taplinknw_phy_fia_0_cdu_apollo0.usb4_phy_common_reg
+        path_to_mg_tap_crsel = sv.socket0.soc.taps.dfx_par_iom_taplinknw_phy_fia_0_mg00.crsel
+        path_to_tcss_phy_env = sv.socket0.soc.tcss.tcss_phy_env_i_0
+        mg_index='0'
+        index='0'
+    elif phy_index == 1:
+        path_to_cdu_apollo_taplinkcfg = sv.socket0.soc.taps.dfx_par_iom_taplinknw_phy_fia_0_cdu_apollo1.taplinkcfg
+        path_to_cdu_apollo_usb4_phy_common_reg = sv.socket0.soc.taps.dfx_par_iom_taplinknw_phy_fia_0_cdu_apollo1.usb4_phy_common_reg
+        path_to_mg_tap_crsel = sv.socket0.soc.taps.dfx_par_iom_taplinknw_phy_fia_0_mg10.crsel
+        path_to_tcss_phy_env = sv.socket0.soc.tcss.tcss_phy_env_i_1
+        mg_index='1'
+        index='1'
+    elif phy_index == 2:
+        path_to_cdu_apollo_taplinkcfg = sv.socket0.soc.taps.dfx_par_iom_taplinknw_phy_fia_1_cdu_apollo0.taplinkcfg
+        path_to_cdu_apollo_usb4_phy_common_reg = sv.socket0.soc.taps.dfx_par_iom_taplinknw_phy_fia_1_cdu_apollo0.usb4_phy_common_reg
+        path_to_mg_tap_crsel = sv.socket0.soc.taps.dfx_par_iom_taplinknw_phy_fia_1_mg00.crsel
+        path_to_tcss_phy_env = sv.socket0.soc.tcss.tcss_phy_env_i_2
+        mg_index='0'
+        index='2'
+    elif phy_index == 3:
+        path_to_cdu_apollo_taplinkcfg = sv.socket0.soc.taps.dfx_par_iom_taplinknw_phy_fia_1_cdu_apollo1.taplinkcfg
+        path_to_cdu_apollo_usb4_phy_common_reg = sv.socket0.soc.taps.dfx_par_iom_taplinknw_phy_fia_1_cdu_apollo1.usb4_phy_common_reg
+        path_to_mg_tap_crsel = sv.socket0.soc.taps.dfx_par_iom_taplinknw_phy_fia_1_mg10.crsel
+        path_to_tcss_phy_env = sv.socket0.soc.tcss.tcss_phy_env_i_3
+        mg_index='3'
+        index='3'
+                """
         lines.insert(i+1,parameters_select)
         for line_num, line in enumerate(lines):
             lines[line_num] = lines[line_num].replace("(sv.socket0.soc.taps.dfx_par_iom_taplinknw_phy_fia_0_cdu_apollo0.taplinkcfg","(path_to_cdu_apollo_taplinkcfg")
@@ -98,7 +135,7 @@ def tcss_add_phy_index_and_post_boot(output_dir,conversion_time):
             print("tcss post boot script added on: %s"%file_path)
     print("tcss_add_phy_index_and_post_boot DONE")
 
-def edp_add_post_boot(output_dir,conversion_time):
+def edp_add_post_boot(output_dir,conversion_time,CPUgen):
     def rewrite_file(file):
         lines = file.readlines()
         i=0
@@ -181,9 +218,9 @@ class run():
         self.direct_reg = direct_reg
         self.run_translation()
         print('') # prints newline seperator
-        tcss_add_phy_index_and_post_boot(self.output_dir,conversion_time)
+        tcss_add_phy_index_and_post_boot(self.output_dir,conversion_time,self.CPUgen)
         print('') # prints newline seperator
-        edp_add_post_boot(self.output_dir,conversion_time)
+        edp_add_post_boot(self.output_dir,conversion_time,self.CPUgen)
         print('') # prints newline seperator
         print(log_file_path)
 

commit 60f4b3f7dc5645c71011111d0a48280859cd35d0
Author: 12143054-C1 <sivan.zusin@intel.com>
Date:   Thu Jun 6 11:06:59 2024 +0300

    a

diff --git a/Tools/run_function_from_module.py b/Tools/run_function_from_module.py
new file mode 100644
index 0000000..b9968fa
--- /dev/null
+++ b/Tools/run_function_from_module.py
@@ -0,0 +1,44 @@
+import importlib.util
+import sys
+
+def run_function_from_module(module_path, function_name, *args, **kwargs):
+    """
+    Imports a module from a given path and runs a specified function from that module.
+
+    Parameters:
+    - module_path (str): The file path of the module to import.
+    - function_name (str): The name of the function to run from the module.
+    - args: Positional arguments to pass to the function.
+    - kwargs: Keyword arguments to pass to the function.
+
+    Returns:
+    - The result of the function call.
+    """
+
+    # Load the module spec from the given file path
+    spec = importlib.util.spec_from_file_location("module.name", module_path)
+    if spec is None:
+        raise ImportError(f"Could not load the module from {module_path}")
+
+    # Create a new module based on the spec
+    module = importlib.util.module_from_spec(spec)
+
+    # Add the module to sys.modules so it can be imported
+    sys.modules[spec.name] = module
+
+    # Execute the module
+    spec.loader.exec_module(module)
+
+    # Get the function from the module
+    func = getattr(module, function_name, None)
+    if func is None:
+        raise AttributeError(f"The function '{function_name}' does not exist in the module '{module_path}'")
+
+    # Call the function with the provided arguments and keyword arguments
+    return func(*args, **kwargs)
+
+# Example usage:
+# Assuming there is a file 'example_module.py' with a function 'example_function'
+# module_path = 'path/to/your/example_module.py'
+# result = run_function_from_module(module_path, 'example_function', arg1, arg2, kwarg1=value1)
+# print(result)

commit 12e2b8751383d2b7bf5013e5fa4b3b321011b4ab
Author: 12143054-C1 <sivan.zusin@intel.com>
Date:   Sun Jun 2 12:21:46 2024 +0300

    scripting update

diff --git a/.gitignore b/.gitignore
new file mode 100644
index 0000000..da1f74e
--- /dev/null
+++ b/.gitignore
@@ -0,0 +1,2 @@
+Release/
+__pycache__/
diff --git a/LTK_SPF_Converter_V2.py b/LTK_SPF_Converter.py
similarity index 99%
rename from LTK_SPF_Converter_V2.py
rename to LTK_SPF_Converter.py
index d6e9d2e..199c23c 100644
--- a/LTK_SPF_Converter_V2.py
+++ b/LTK_SPF_Converter.py
@@ -1,5 +1,5 @@
 #############################
-# Module name: LTK_SPF_Converter_V2.pyw
+# Module name: LTK_SPF_Converter.pyw
 # Description: This module provides a graphical user interface for converting LTK SPF files using various options. 
 #              The GUI includes functionalities for selecting source files or folders, choosing destination folders, 
 #              setting CPU generation options, and enabling or disabling ITPP comments. The conversion process is 
diff --git a/Release.py b/Release.py
new file mode 100644
index 0000000..24843e7
--- /dev/null
+++ b/Release.py
@@ -0,0 +1,54 @@
+import re
+import os
+import shutil
+
+def validate_version(version_input):
+    # Define regex pattern
+    pattern = r'^\d+\.\d+\.\d+[a-z]?\d*$'
+
+    # Check if version_input matches the pattern
+    return re.match(pattern, version_input) is not None
+
+def main():
+    # Get the release version from user input
+    while True:
+        version_input = input("Enter the release version (format x.x.xY or x.x.x): ").strip()
+        if validate_version(version_input):
+            break
+        else:
+            print("Invalid version format. Please enter a valid version.")
+
+    # Get the current working directory
+    base_dir = os.path.dirname(os.path.abspath(__file__))
+
+    # Define the module name and source paths relative to the current directory
+    module_name = "LTK_SPF_Converter"
+    icon_path = os.path.join(base_dir, "crown.ico")
+    help_file = os.path.join(base_dir, "LTK_SPF_HELP.chm")
+    history_file = os.path.join(base_dir, "ltk_spf_history.csv")
+    script_path = os.path.join(base_dir, f"{module_name}.py")
+
+    # Define the output directory relative to the current directory
+    output_dir = os.path.join(base_dir, "Release", f"{module_name}_{version_input}")
+
+    # Create the output directory if it doesn't exist
+    os.makedirs(output_dir, exist_ok=True)
+
+    # Run pyinstaller
+    os.system(f'pyinstaller --noconfirm --onefile --console --icon "{icon_path}" --add-data "{icon_path};." --add-data "{help_file};." --add-data "{history_file};." "{script_path}" --distpath "{output_dir}"')
+
+    # Copy additional files to the output directory
+    shutil.copy(icon_path, output_dir)
+    shutil.copy(help_file, output_dir)
+    shutil.copy(history_file, output_dir)
+
+    # Delete the .spec file and the build folder
+    spec_file = os.path.join(base_dir, f"{module_name}.spec")
+    build_folder = os.path.join(base_dir, "build")
+    os.remove(spec_file)
+    shutil.rmtree(build_folder)
+
+    print("Build and copy completed.")
+
+if __name__ == "__main__":
+    main()

commit d30f578b6c69d1bd1030b01ec17fbddb5ac34fdb
Author: 12143054-C1 <sivan.zusin@intel.com>
Date:   Sun Jun 2 10:18:23 2024 +0300

    technical bug fixes on conversion correctness

diff --git a/LTK_SPF_Converter_V2.py b/LTK_SPF_Converter_V2.py
index 1606c0c..d6e9d2e 100644
--- a/LTK_SPF_Converter_V2.py
+++ b/LTK_SPF_Converter_V2.py
@@ -119,7 +119,7 @@ class Converter_GUI():
         self.floor_frame.pack(fill='x', pady=5, padx=5, side='bottom', anchor='s')
 
         # Software Version
-        self.version_label = tk.Label(self.floor_frame, text="2.0.0b1")
+        self.version_label = tk.Label(self.floor_frame, text="2.0.1b1")
         self.version_label.pack(side='left')
 
         # Copyright
diff --git a/Tools/run_converter_testing.py b/Tools/run_converter_testing.py
new file mode 100644
index 0000000..4ba5c98
--- /dev/null
+++ b/Tools/run_converter_testing.py
@@ -0,0 +1,31 @@
+###  YOU GOTTA PASTE THIS TO THE STAB MODE PYTHON INSTANCE ###
+
+import os
+import importlib.util
+
+def run_converted_modules(folder_path):
+    # Ensure the provided path is a directory
+    if not os.path.isdir(folder_path):
+        raise NotADirectoryError(f"The provided path '{folder_path}' is not a directory.")
+    
+    # Iterate over all files in the directory
+    for file_name in os.listdir(folder_path):
+        # Check if the file is a Python module
+        if file_name.endswith('.py'):
+            module_name = file_name[:-3]  # Remove the .py extension
+            module_path = os.path.join(folder_path, file_name)
+            
+            # Dynamically load the module
+            spec = importlib.util.spec_from_file_location(module_name, module_path)
+            module = importlib.util.module_from_spec(spec)
+            spec.loader.exec_module(module)
+            
+            # Check if the module has the 'runConverted' function and run it
+            if hasattr(module, 'runConverted'):
+                print(f"Running 'runConverted' from module '{module_name}'")
+                module.runConverted()
+            else:
+                print(f"Module '{module_name}' does not have a 'runConverted' function")
+
+# Example usage:
+run_converted_modules('/path/to/your/folder')
diff --git a/__pycache__/lnl_spf_2_pythonsv_script_BlackBox_Advanced.cpython-310.pyc b/__pycache__/lnl_spf_2_pythonsv_script_BlackBox_Advanced.cpython-310.pyc
index 6606a5f..ef0fda5 100644
Binary files a/__pycache__/lnl_spf_2_pythonsv_script_BlackBox_Advanced.cpython-310.pyc and b/__pycache__/lnl_spf_2_pythonsv_script_BlackBox_Advanced.cpython-310.pyc differ
diff --git a/lnl_spf_2_pythonsv_script_BlackBox_Advanced.py b/lnl_spf_2_pythonsv_script_BlackBox_Advanced.py
index 74416b5..b95f48c 100644
--- a/lnl_spf_2_pythonsv_script_BlackBox_Advanced.py
+++ b/lnl_spf_2_pythonsv_script_BlackBox_Advanced.py
@@ -283,7 +283,7 @@ class Command():
                 # Need to add comment "label: ..."
                 x = "##>>> SPF Label:    {}".format(row[6:-2])
                 self.printC1(x,output)
-            self.printC1("""last_label = {}""".format(row[6:-2].split(",")[0]),output)
+            self.printC1("""last_label = '{}'""".format(row.split('"')[1]),output)
             self.printC1("print(last_label)",output)
             self.print_last_label = True
             self.prev_row = row
@@ -764,6 +764,8 @@ class svReg():
                 i += 1
 
     def compare(self, fieldName, data, reg_name, compare_targets):
+        append = True
+        data_arr = bitfield2(data)
         if isinstance(fieldName, tuple):
             if len(fieldName) == 2:
                 index = fieldName
@@ -771,14 +773,16 @@ class svReg():
                 bit_offset = getattr(self.regName,fieldName[0].split("[")[0]).info['bitOffset']
                 index_len = getattr(self.regName,fieldName[0].split("[")[0]).info['bitWidth']
                 index = (int(str(bit_offset)) + int(str(index_len)) -1 ,  int(str(bit_offset)))
-                index =( int(str(index[0]))+ int(str(fieldName[1])) , int(str(index[0])) + int(str(fieldName[2])) + 1 )
+                index =( int(str(index[1]))+ int(str(fieldName[1])) , int(str(index[1])) + int(str(fieldName[2])))
+                data_arr = data_arr[ 0 : fieldName[2] - fieldName[1] + 1 ]
+                append = False
         else:
             bit_offset = getattr(self.regName,fieldName).info['bitOffset']
             index_len = getattr(self.regName,fieldName).info['bitWidth']
             index = (int(str(bit_offset)) + int(str(index_len)) -1 ,  int(str(bit_offset)))
-        data_arr = bitfield2(data)
-        while len(data_arr) < index_len:
-            data_arr.append("0")
+        if append:
+            while len(data_arr) < index_len:
+                data_arr.append("0")    
         if reg_compare(self.param_read_arr[index[1]:index[0]+1],data_arr):
             prGreen("### P A S S ###  compare %s = %s\\n                  compared fields: %s" %(reg_name, data, compare_targets))
         else:
diff --git a/ltk_spf_history.csv b/ltk_spf_history.csv
index 4000428..4c39406 100644
--- a/ltk_spf_history.csv
+++ b/ltk_spf_history.csv
@@ -1,3 +1,3 @@
 C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/TCSS/cmem_tc0_dp_anelb_1p62_lfsr31.spf,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/TCSS/cmem_tc0_dp_extlb_10_lfsr31.spf
-C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/TCSS,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/CDPHY
-C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/CDPHY\LTK_26-05-24_15-11-51,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/CDPHY\LTK_26-05-24_15-10-54,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/CDPHY\LTK_26-05-24_15-05-49,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/TCSS\LTK_26-05-24_12-47-42,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/TCSS\LTK_26-05-24_12-39-12,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/TCSS\LTK_26-05-24_12-26-03,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/TCSS\LTK_26-05-24_12-20-46,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/TCSS\LTK_26-05-24_12-18-31,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/TCSS\LTK_25-05-24_18-39-37,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/TCSS\LTK_25-05-24_18-40-04
+C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/CDPHY,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/TCSS
+C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/CDPHY\LTK_02-06-24_10-17-15,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/CDPHY\LTK_30-05-24_18-16-42,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/CDPHY\LTK_30-05-24_18-16-11,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/CDPHY\LTK_30-05-24_18-15-47,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/CDPHY\LTK_30-05-24_17-45-14,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/CDPHY\LTK_30-05-24_17-40-02,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/CDPHY\LTK_30-05-24_17-36-10,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/CDPHY\LTK_30-05-24_16-13-04,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/CDPHY\LTK_30-05-24_15-18-44,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/CDPHY\LTK_26-05-24_15-11-51,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/CDPHY\LTK_26-05-24_15-10-54,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/CDPHY\LTK_26-05-24_15-05-49,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/TCSS\LTK_26-05-24_12-47-42,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/TCSS\LTK_26-05-24_12-39-12,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/TCSS\LTK_26-05-24_12-26-03,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/TCSS\LTK_26-05-24_12-20-46,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/TCSS\LTK_26-05-24_12-18-31,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/TCSS\LTK_25-05-24_18-39-37,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/TCSS\LTK_25-05-24_18-40-04

commit 2619598896faac4d790e58369e83343a5ef8827d
Author: 12143054-C1 <sivan.zusin@intel.com>
Date:   Mon May 27 09:51:32 2024 +0300

    functionality update

diff --git a/.vscode/settings.json b/.vscode/settings.json
new file mode 100644
index 0000000..9fcf61c
--- /dev/null
+++ b/.vscode/settings.json
@@ -0,0 +1,3 @@
+{
+  "cSpell.words": ["ITPP"]
+}
diff --git a/LTK_SPF_Converter_V2.pyw b/LTK_SPF_Converter_V2.py
similarity index 92%
rename from LTK_SPF_Converter_V2.pyw
rename to LTK_SPF_Converter_V2.py
index 9c4c279..1606c0c 100644
--- a/LTK_SPF_Converter_V2.pyw
+++ b/LTK_SPF_Converter_V2.py
@@ -1,3 +1,12 @@
+#############################
+# Module name: LTK_SPF_Converter_V2.pyw
+# Description: This module provides a graphical user interface for converting LTK SPF files using various options. 
+#              The GUI includes functionalities for selecting source files or folders, choosing destination folders, 
+#              setting CPU generation options, and enabling or disabling ITPP comments. The conversion process is 
+#              handled in a separate thread, and progress is shown via a progress bar. The module also maintains 
+#              a history of source and destination paths for convenience.
+#############################
+
 import tkinter as tk
 from tkinter import ttk, messagebox, filedialog
 import os
@@ -33,12 +42,12 @@ class Converter_GUI():
         source_label.pack(side='left', padx=0)
         # source radiobuttons
         # Variable to hold the source type
-        self.source_type = tk.StringVar(value='file')
+        self.source_type = tk.StringVar(value='Folder')
         self.source_file_radiobutton = tk.Radiobutton(
-            self.source_frame, text="File", variable=self.source_type, value='file', command=self.update_combobox)
+            self.source_frame, text="File", variable=self.source_type, value='file', command=self.update_combobox, state='disabled') ############### disabled in beta 1 release
         self.source_file_radiobutton.pack(side='left')
         self.source_folder_radiobutton = tk.Radiobutton(
-            self.source_frame, text="Folder", variable=self.source_type, value='folder', command=self.update_combobox)
+            self.source_frame, text="Folder", variable=self.source_type, value='Folder', command=self.update_combobox)
         self.source_folder_radiobutton.pack(side='left')
         # select button
         self.select_button = tk.Button(
@@ -103,7 +112,7 @@ class Converter_GUI():
         self.progress = tk.DoubleVar()
         self.progress_bar = ttk.Progressbar(
             root, variable=self.progress, maximum=100)
-        self.progress_bar.pack(fill='x', padx=5, pady=5)
+        # self.progress_bar.pack(fill='x', padx=5, pady=5) progress bar not shown. WIP!
 
         # Floor Frame
         self.floor_frame = tk.Frame(root)
@@ -138,7 +147,7 @@ class Converter_GUI():
         selected = self.source_select_combobox.get()
         if selected:
             self.update_history(self.source_file_history if self.source_type.get(
-            ) == 'file' else self.source_folder_history, selected)
+            ) == 'File' else self.source_folder_history, selected)
             self.update_combobox()  # Refresh the combobox with updated history
 
     def update_dest_history_on_select(self):
@@ -212,7 +221,7 @@ class Converter_GUI():
     def update_dest_based_on_source(self, event):
         source_path = self.source_select_combobox.get()
         if source_path:
-            if self.source_type.get() == 'file':
+            if self.source_type.get() == 'File':
                 base_path = os.path.dirname(source_path)
             else:
                 base_path = source_path
@@ -226,7 +235,7 @@ class Converter_GUI():
     def select_file_folder(self):
         base_path = ''
         # Function to handle file/folder selection
-        if self.source_type.get() == 'file':
+        if self.source_type.get() == 'File':
             file_path = filedialog.askopenfilename()
             if file_path:
                 self.source_file_history.insert(
@@ -276,7 +285,7 @@ class Converter_GUI():
             messagebox.showerror("Error", "Source not selected!")
             return
 
-        if self.source_type.get() == 'file':
+        if self.source_type.get() == 'File':
             base_path = os.path.dirname(source_path)
         else:
             base_path = source_path
@@ -305,7 +314,7 @@ class Converter_GUI():
 
     def update_combobox(self):
         # Update the combobox items based on the selected source type (file or folder)
-        if self.source_type.get() == 'file':
+        if self.source_type.get() == 'File':
             self.source_select_combobox['values'] = self.source_file_history
         else:
             self.source_select_combobox['values'] = self.source_folder_history
diff --git a/Tools/copypasta_regs.txt b/Tools/copypasta_regs.txt
new file mode 100644
index 0000000..e0273ce
--- /dev/null
+++ b/Tools/copypasta_regs.txt
@@ -0,0 +1,3 @@
+print(sv.socket0.soc.search("TAPLINKCFG"))
+print(sv.socket0.soc.search("USB4_PHY_COMMON_REG"))
+print(sv.socket0.soc.search("USB4_PHY_RESET_OVRD_REG"))
diff --git a/Tools/copypasta_response.txt b/Tools/copypasta_response.txt
new file mode 100644
index 0000000..e69de29
diff --git a/Tools/regs.txt b/Tools/regs.txt
new file mode 100644
index 0000000..53fea71
--- /dev/null
+++ b/Tools/regs.txt
@@ -0,0 +1,3 @@
+TAPLINKCFG
+USB4_PHY_COMMON_REG
+USB4_PHY_RESET_OVRD_REG
diff --git a/Tools/tap_debugger.py b/Tools/tap_debugger.py
index 6d2803f..19d5afc 100644
--- a/Tools/tap_debugger.py
+++ b/Tools/tap_debugger.py
@@ -33,27 +33,27 @@ class Debugger:
                                 register_names.add(register_name)
         
         # Write unique tap names to taps.txt
-        with open(r'sio\LNL\sio_dv\users\szusin\taps.txt', 'w') as taps_file:
+        with open(r'C:\pythonsv\LTK SPF Converter\Tools\taps.txt', 'w') as taps_file:
             for tap_name in sorted(tap_names):  # Sort to make it organized
                 taps_file.write(tap_name + '\n')
         
         # Write unique register names to regs.txt
-        with open(r'sio\LNL\sio_dv\users\szusin\regs.txt', 'w') as regs_file:
+        with open(r'C:\pythonsv\LTK SPF Converter\Tools\regs.txt', 'w') as regs_file:
             for register_name in sorted(register_names):  # Sort to make it organized
                 regs_file.write(register_name + '\n')
 
     def generate_sv_copypasta(self):
         regs = []
-        with open(r'sio\LNL\sio_dv\users\szusin\regs.txt', 'r') as regs_file:
+        with open(r'C:\pythonsv\LTK SPF Converter\Tools\regs.txt', 'r') as regs_file:
             regs = regs_file.readlines()
             for i,reg in enumerate(regs):
                 regs[i] = f'print(sv.socket0.soc.search("{reg[:-1]}"))\n'
-        with open(r'sio\LNL\sio_dv\users\szusin\copypasta_regs.txt', 'w') as regs_file:
+        with open(r'C:\pythonsv\LTK SPF Converter\Tools\copypasta_regs.txt', 'w') as regs_file:
             regs_file.writelines(regs)
     
     def output_dict_from_copypasta_response(self):
         taps = set()
-        with open(r'sio\LNL\sio_dv\users\szusin\copypasta_response.txt', 'r') as response_file:
+        with open(r'C:\pythonsv\LTK SPF Converter\Tools\copypasta_response.txt', 'r') as response_file:
             lines = response_file.readlines()
             for line in lines:
                 tap = line.split("'")[1]
@@ -68,7 +68,7 @@ class Debugger:
     def create_tap_dict(self):
         self.output_dict_from_copypasta_response()
         spf_taps = []
-        with open(r'sio\LNL\sio_dv\users\szusin\taps.txt', 'r') as taps_file:
+        with open(r'C:\pythonsv\LTK SPF Converter\Tools\taps.txt', 'r') as taps_file:
             spf_taps = taps_file.readlines()
         content = "\n"
         for spf_tap in spf_taps:
diff --git a/Tools/taps.txt b/Tools/taps.txt
new file mode 100644
index 0000000..70a059a
--- /dev/null
+++ b/Tools/taps.txt
@@ -0,0 +1,17 @@
+DFX_PAR_IOM_TAPLINKNW_PHY_FIA_0_CDU_APOLLO0_TAP
+DFX_PAR_IOM_TAPLINKNW_PHY_FIA_1_CDU_APOLLO0_TAP
+DFX_PAR_IOM_TAPLINKNW_PHY_FIA_0_CDU_APOLLO1_TAP
+DFX_PAR_IOM_TAPLINKNW_PHY_FIA_1_CDU_APOLLO1_TAP
+DFX_PAR_IOM_TAPLINKNW_PHY_FIA_0_MG0_TAP0
+DFX_PAR_IOM_TAPLINKNW_PHY_FIA_0_MG1_TAP0
+DFX_PAR_IOM_TAPLINKNW_PHY_FIA_1_MG0_TAP0
+DFX_PAR_IOM_TAPLINKNW_PHY_FIA_1_MG1_TAP0
+
+['taps.cltap.taplinkcfg', 'taps.dfx_pargpcom35.taplinkcfg', 'taps.dfx_parxdci.taplinkcfg', 'taps.dfx_parxhcieng.taplinkcfg', 'taps.dfx_parxhciport.taplinkcfg', 'taps.dfx_parpmc.taplinkcfg', 'taps.dfx_parlpss.taplinkcfg', 'taps.dfx_parleg.taplinkcfg', 'taps.dfx_parlpss_2.taplinkcfg', 'taps.dfx_parnpk.taplinkcfg', 'taps.dfx_parossecse.taplinkcfg', 'taps.dfx_parpsf6.taplinkcfg', 'taps.dfx_paracehost.taplinkcfg', 'taps.dfx_parcnv.taplinkcfg', 'taps.dfx_pargbe.taplinkcfg', 'taps.dfx_pargpcom01.taplinkcfg', 'taps.dfx_parossecfmia.taplinkcfg', 'taps.dfx_parusb3phy.taplinkcfg', 'taps.dfx_paracehubio.taplinkcfg', 'taps.dfx_paracemem.taplinkcfg', 'taps.dfx_parossecse_2.taplinkcfg', 'taps.dfx_parossefuse.taplinkcfg', 'taps.dfx_parpxpatxrx.taplinkcfg', 'taps.dfx_paracehpdspa.taplinkcfg', 'taps.dfx_paracehpdspb.taplinkcfg', 'taps.dfx_paracehpdspc.taplinkcfg', 'taps.dfx_paracehpdspd.taplinkcfg', 'taps.dfx_paracehpdspe.taplinkcfg', 'taps.dfx_parcsmeb.taplinkcfg', 'taps.dfx_parpxpacore.taplinkcfg', 'taps.dfx_parcfmia.taplinkcfg', 'taps.dfx_parcse.taplinkcfg', 'taps.dfx_parpxpampphy.taplinkcfg', 'taps.dfx_parcsiphy.taplinkcfg', 'taps.dfx_paredp.taplinkcfg', 'taps.dfx_paresecse.taplinkcfg', 'taps.dfx_pargpcom4.taplinkcfg', 'taps.dfx_parcse_2.taplinkcfg', 'taps.dfx_pard2diipu.taplinkcfg', 'taps.dfx_paresecfmia.taplinkcfg', 'taps.dfx_pariocce.taplinkcfg', 'taps.dfx_par_iom_taplinknw_cdu_iom.taplinkcfg', 'taps.dfx_parioc.taplinkcfg', 'taps.dfx_par_iom_taplinknw_cdu_iom_tpc.taplinkcfg', 'taps.dfx_par_iom_taplinknw_cdu_psftctop4.taplinkcfg', 'taps.dfx_par_iom_taplinknw_iom_iom_aongtap.taplinkcfg', 'taps.dfx_parinoc.taplinkcfg', 'taps.dfx_parpsf0.taplinkcfg', 'taps.dfx_par_iom_taplinknw_cdu_usbx_dev_com.taplinkcfg', 'taps.dfx_par_iom_taplinknw_iom_iom.taplinkcfg', 'taps.dfx_pard2dinoc.taplinkcfg', 'taps.dfx_parish.taplinkcfg', 'taps.dfx_parvtu.taplinkcfg', 'taps.dfx_par_iom_taplinknw_cdu_psf5.taplinkcfg', 'taps.dfx_par_iom_taplinknw_cdu_usbx_usb3_com.taplinkcfg', 'taps.dfx_parfuse.taplinkcfg', 'taps.dfx_paricc.taplinkcfg', 'taps.dfx_parpsf4.taplinkcfg', 'taps.dfx_par_iom_taplinknw_cdu_usbx_port_com.taplinkcfg', 'taps.dfx_par_iom_taplinknw_phy_fia_0_cdu_apollo0.taplinkcfg', 'taps.dfx_par_iom_taplinknw_phy_fia_0_cdu_apollo1.taplinkcfg', 'taps.dfx_par_iom_taplinknw_phy_fia_1_cdu_apollo0.taplinkcfg', 'taps.dfx_par_iom_taplinknw_phy_fia_1_cdu_apollo1.taplinkcfg', 'taps.dfx_parisclk.taplinkcfg', 'taps.dfx_parpxpbtxrx.taplinkcfg', 'taps.dfx_par_iom_taplinknw_cdu_apollo_main.taplinkcfg', 'taps.dfx_par_iom_taplinknw_par_tbt_cio_0_cdu_tbt_cio.taplinkcfg', 'taps.dfx_par_iom_taplinknw_par_tbt_cio_1_cdu_tbt_cio.taplinkcfg', 'taps.dfx_parpxpbllp.taplinkcfg', 'taps.dfx_parufsphy.taplinkcfg', 'taps.dfx_par_iom_taplinknw_par_pcie_0_cdu_pcie.taplinkcfg', 'taps.dfx_par_iom_taplinknw_par_pcie_1_cdu_pcie.taplinkcfg', 'taps.dfx_par_iom_taplinknw_par_pcie_2_cdu_pcie.taplinkcfg', 'taps.dfx_par_iom_taplinknw_par_pcie_3_cdu_pcie.taplinkcfg', 'taps.dfx_par_iom_taplinknw_par_tbt_dma_0_cdu_tbt_dma.taplinkcfg', 'taps.dfx_par_iom_taplinknw_par_tbt_dma_1_cdu_tbt_dma.taplinkcfg', 'taps.dfx_par_iom_taplinknw_par_tbt_dp_0_cdu_tbt_dp.taplinkcfg', 'taps.dfx_par_iom_taplinknw_par_tbt_dp_1_cdu_tbt_dp.taplinkcfg', 'taps.dfx_par_iom_taplinknw_par_tbt_ports_0_cdu_tbt_ports.taplinkcfg', 'taps.dfx_par_iom_taplinknw_par_tbt_ports_1_cdu_tbt_ports.taplinkcfg', 'taps.dfx_par_iom_taplinknw_par_tbt_ports_ext_0_cdu_tbt_ports_ext.taplinkcfg', 'taps.dfx_par_iom_taplinknw_par_tbt_ports_ext_1_cdu_tbt_ports_ext.taplinkcfg', 'taps.gen5_taplinknw_dfx_parpxpg5.taplinkcfg', 'taps.dfx_parpxpbcore.taplinkcfg', 'taps.dfx_par_iom_taplinknw_phy_fia_0_cdu_phy_fia.taplinkcfg', 'taps.dfx_par_iom_taplinknw_phy_fia_1_cdu_phy_fia.taplinkcfg', 'taps.gen5_taplinknw_dfx_parpxpg5phy.taplinkcfg', 'taps.dfx_parpxpbmpphy.taplinkcfg']
+['taps.dfx_par_iom_taplinknw_phy_fia_0_cdu_apollo0.usb4_phy_common_reg', 'taps.dfx_par_iom_taplinknw_phy_fia_0_cdu_apollo1.usb4_phy_common_reg', 'taps.dfx_par_iom_taplinknw_phy_fia_1_cdu_apollo0.usb4_phy_common_reg', 'taps.dfx_par_iom_taplinknw_phy_fia_1_cdu_apollo1.usb4_phy_common_reg']
+['taps.dfx_par_iom_taplinknw_phy_fia_0_cdu_apollo0.usb4_phy_reset_ovrd_reg', 'taps.dfx_par_iom_taplinknw_phy_fia_0_cdu_apollo1.usb4_phy_reset_ovrd_reg', 'taps.dfx_par_iom_taplinknw_phy_fia_1_cdu_apollo0.usb4_phy_reset_ovrd_reg', 'taps.dfx_par_iom_taplinknw_phy_fia_1_cdu_apollo1.usb4_phy_reset_ovrd_reg']
+
+taps.dfx_par_iom_taplinknw_phy_fia_0_cdu_apollo0
+taps.dfx_par_iom_taplinknw_phy_fia_0_cdu_apollo0
+taps.dfx_par_iom_taplinknw_phy_fia_1_cdu_apollo1
+taps.dfx_par_iom_taplinknw_phy_fia_1_cdu_apollo1
\ No newline at end of file
diff --git a/USE_EXAMPLE.py b/USE_EXAMPLE.py
index f03a87c..0aac0e5 100644
--- a/USE_EXAMPLE.py
+++ b/USE_EXAMPLE.py
@@ -1,8 +1,16 @@
+#############################
+# Module name: USE_EXAMPLE.py
+# Description: This module provides an example function for using the `spf2sv_converter` from the `spfs_source` module. 
+#              The function demonstrates how to set up the necessary parameters and call the converter to process 
+#              SPF files. It takes input and output directories, a flag for using weekly folders, a log file path, 
+#              conversion time, and an optional CPU generation parameter.
+#############################
+
 def use_example(direct_reg,input_dir,output_dir,week_folder_en,log_file_path,conversion_time,CPUgen='PTL'):
     import os,sys
     import sys
     #sys.path.append(os.getcwd())
-    from spfs_source import spf2sv_converter
+    import spf2sv_converter
     # input_dir  = r"C:\pythonsv\atdio\sio\LNL\sio_dv\spfs_source\ww22_2'23\ILB_eDP_eDP"             # r"C:\pythonsv\lunarlake\debug\domains\sio_dv\spfs_source\9_1" #
     # output_dir = r"C:\pythonsv\atdio\sio\LNL\sio_dv\spfs_pysv_ready"             # r"C:\pythonsv\lunarlake\debug\domains\sio_dv\spfs_pysv_ready\Current" # r"C:\Scripts\spf conversion sandbox\output lib"
     print(f"input_dir= {input_dir}\noutput_dir= {output_dir}\nweek_folder_en= {week_folder_en}\ndirect_reg= {direct_reg}\n")
diff --git a/__pycache__/USE_EXAMPLE.cpython-310.pyc b/__pycache__/USE_EXAMPLE.cpython-310.pyc
new file mode 100644
index 0000000..43ea5bd
Binary files /dev/null and b/__pycache__/USE_EXAMPLE.cpython-310.pyc differ
diff --git a/__pycache__/conversion_module.cpython-310.pyc b/__pycache__/conversion_module.cpython-310.pyc
index 6fdd5f3..0cd7c7c 100644
Binary files a/__pycache__/conversion_module.cpython-310.pyc and b/__pycache__/conversion_module.cpython-310.pyc differ
diff --git a/__pycache__/lnl_spf_2_pythonsv_script_BlackBox_Advanced.cpython-310.pyc b/__pycache__/lnl_spf_2_pythonsv_script_BlackBox_Advanced.cpython-310.pyc
new file mode 100644
index 0000000..6606a5f
Binary files /dev/null and b/__pycache__/lnl_spf_2_pythonsv_script_BlackBox_Advanced.cpython-310.pyc differ
diff --git a/__pycache__/spf2sv_converter.cpython-310.pyc b/__pycache__/spf2sv_converter.cpython-310.pyc
new file mode 100644
index 0000000..2a17229
Binary files /dev/null and b/__pycache__/spf2sv_converter.cpython-310.pyc differ
diff --git a/conversion_module.py b/conversion_module.py
index 2855fdf..71cdf20 100644
--- a/conversion_module.py
+++ b/conversion_module.py
@@ -1,6 +1,14 @@
-# conversion_module.py
+#############################
+# Module name: conversion_module.py
+# Description: This module defines a Converter class responsible for handling the conversion of files or folders 
+#              from a source path to a destination path. The conversion process includes options for CPU generation 
+#              and the use of ITPP comments. The progress of the conversion is updated via a callback function.
+#############################
+
 import os
 import time
+import subprocess
+import USE_EXAMPLE as ue
 
 class Converter:
     def __init__(self, source_path, dest_path, cpu_gen, use_itpp, progress_callback=None):
@@ -9,6 +17,7 @@ class Converter:
         self.cpu_gen = cpu_gen
         self.use_itpp = use_itpp
         self.progress_callback = progress_callback
+        self.conversion_time = time.time()
 
     def run_conversion(self):
         try:
@@ -18,23 +27,42 @@ class Converter:
             if os.path.isdir(self.source_path):
                 files = os.listdir(self.source_path)
                 total_files = len(files)
-                for i, file in enumerate(files):
-                    # Simulating conversion for each file
-                    time.sleep(0.1)  # Simulating a long-running process
+                # for i, file in enumerate(files):   ############### loop disabled in beta 1 release
+                for i in [0]:
+                    ## Folder conversion function here
+                    ue.use_example(
+                        self.use_itpp,
+                        self.source_path,
+                        self.dest_path,
+                        False,
+                        os.path.join(self.dest_path, 'conversion_log.txt'),
+                        self.conversion_time,
+                        self.cpu_gen)
                     if self.progress_callback:
                         progress = int((i + 1) / total_files * 100)
                         self.progress_callback(progress)
             else:
+                ## File conversion function here
                 # Simulate conversion for a single file
                 time.sleep(0.1)  # Simulating a long-running process
                 if self.progress_callback:
                     self.progress_callback(100)
             
-            with open(os.path.join(self.dest_path, 'conversion_log.txt'), 'w') as f:
+            with open(os.path.join(self.dest_path, 'conversion_log.txt'), 'a') as f:
                 f.write(f"Source: {self.source_path}\n")
                 f.write(f"Destination: {self.dest_path}\n")
                 f.write(f"CPU Gen: {self.cpu_gen}\n")
                 f.write(f"Use ITPP Comments: {'Yes' if self.use_itpp else 'No'}\n")
             print(f"Conversion completed for {self.source_path} to {self.dest_path}")
+
+            ## Open the destination folder after conversion
+            if os.path.exists(self.dest_path):
+                self.dest_path = self.dest_path.replace("/","\\")
+                ## Open the folder using the default file manager
+                if os.name == "nt":  # Windows
+                    subprocess.Popen(f'explorer "{self.dest_path}"')
+                elif os.name == "posix":  ## Linux or macOS
+                    subprocess.Popen(["xdg-open", destination_entry.get()])
+
         except Exception as e:
             print(f"Error during conversion: {e}")
diff --git a/lnl_spf_2_pythonsv_script_BlackBox_Advanced.py b/lnl_spf_2_pythonsv_script_BlackBox_Advanced.py
index 7a4aec6..74416b5 100644
--- a/lnl_spf_2_pythonsv_script_BlackBox_Advanced.py
+++ b/lnl_spf_2_pythonsv_script_BlackBox_Advanced.py
@@ -1,12 +1,13 @@
-#-------------------------------------------------------------------------------
-# Name:        module1
-# Purpose:
-#
-# Author:      szusin
-#
-# Created:     11/10/2022
-# Copyright:   (c) szusin 2024
-#-------------------------------------------------------------------------------
+#############################
+# Module name: lnl_spf_2_pythonsv_script_BlackBox_Advanced.py
+# Description: This module is designed to convert SPF (Serial Programming File) scripts into
+#              PythonSV scripts for use in validation and testing environments.
+#              It supports direct register access, comparison, and manipulation of register fields,
+#              and includes functionality for handling different CPU generations and their specific
+#              register access methods. The script also provides utilities for timing control, comment handling,
+#              and conditional execution based on register values. It is tailored for use in Intel's validation processes,
+#              particularly for the Lunar Lake (LNL) and other specified CPU generations.
+#############################
 
 #---------######################################################################
 # IMPORTS ######################################################################
diff --git a/ltk_spf_history.csv b/ltk_spf_history.csv
index c4d88e4..4000428 100644
--- a/ltk_spf_history.csv
+++ b/ltk_spf_history.csv
@@ -1,3 +1,3 @@
-C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/TCSS/cmem_tc0_dp_extlb_10_lfsr31.spf,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/TCSS/cmem_tc0_dp_anelb_1p62_lfsr31.spf
-C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/TCSS
-C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/TCSS\LTK_25-05-24_18-39-37,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/TCSS\LTK_25-05-24_18-40-04
+C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/TCSS/cmem_tc0_dp_anelb_1p62_lfsr31.spf,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/TCSS/cmem_tc0_dp_extlb_10_lfsr31.spf
+C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/TCSS,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/CDPHY
+C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/CDPHY\LTK_26-05-24_15-11-51,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/CDPHY\LTK_26-05-24_15-10-54,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/CDPHY\LTK_26-05-24_15-05-49,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/TCSS\LTK_26-05-24_12-47-42,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/TCSS\LTK_26-05-24_12-39-12,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/TCSS\LTK_26-05-24_12-26-03,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/TCSS\LTK_26-05-24_12-20-46,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/TCSS\LTK_26-05-24_12-18-31,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/TCSS\LTK_25-05-24_18-39-37,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/TCSS\LTK_25-05-24_18-40-04
diff --git a/spf2sv_converter.py b/spf2sv_converter.py
index 7558d5a..21e8f0f 100644
--- a/spf2sv_converter.py
+++ b/spf2sv_converter.py
@@ -1,3 +1,11 @@
+#############################
+# Module name: spf2sv_converter.py
+# Description: This module provides functions and classes to translate SPF files to PythonSV files.
+#              It clones the file structure of the input directory to the output directory, applies
+#              various modifications to the translated files, and logs the process. It supports optional
+#              configuration for CPU generation and weekly folder creation.
+#############################
+
 import os, sys, datetime, re
 
 

commit 7b869e479ecf62362d3b866f5d1f89e7eaeaa979
Author: 12143054-C1 <sivan.zusin@intel.com>
Date:   Sun May 26 10:26:45 2024 +0300

    fix

diff --git a/LTK_SPF_Converter_V2.pyw b/LTK_SPF_Converter_V2.pyw
index a756036..9c4c279 100644
--- a/LTK_SPF_Converter_V2.pyw
+++ b/LTK_SPF_Converter_V2.pyw
@@ -19,6 +19,9 @@ class Converter_GUI():
         self.root.title("LTK SPF Converter")
         self.root.minsize(1200, 260)  # Set the minimum window size
 
+        # Set the window icon
+        self.set_window_icon()
+
         # create the menu
         self.create_menu()
 
@@ -104,8 +107,7 @@ class Converter_GUI():
 
         # Floor Frame
         self.floor_frame = tk.Frame(root)
-        self.floor_frame.pack(fill='x', pady=5, padx=5,
-                              side='bottom', anchor='s')
+        self.floor_frame.pack(fill='x', pady=5, padx=5, side='bottom', anchor='s')
 
         # Software Version
         self.version_label = tk.Label(self.floor_frame, text="2.0.0b1")
@@ -116,6 +118,19 @@ class Converter_GUI():
             self.floor_frame, text="┬⌐ 2024 Sivan Zusin")
         self.copyright_label.pack(side='right')
 
+    def set_window_icon(self):
+        # Get the absolute path to the directory containing this script
+        script_dir = os.path.dirname(os.path.abspath(__file__))
+        # Construct the full path to the icon file
+        icon_path = os.path.join(script_dir, 'crown.ico')
+
+        # Load and set the icon
+        if os.path.exists(icon_path):
+            self.root.iconbitmap(icon_path)
+        else:
+            print(f"Icon file not found: {icon_path}")
+
+
     def progress_callback(self, value):
         self.progress.set(value)
 
@@ -209,6 +224,7 @@ class Converter_GUI():
             self.dest_select_combobox.set(default_folder)
 
     def select_file_folder(self):
+        base_path = ''
         # Function to handle file/folder selection
         if self.source_type.get() == 'file':
             file_path = filedialog.askopenfilename()
@@ -318,8 +334,7 @@ class Converter_GUI():
         use_itpp = self.use_itpp.get()
 
         # Create an instance of the Converter class
-        converter = Converter(source_path, dest_path,
-                              cpu_gen, use_itpp, self.progress_callback)
+        converter = Converter(source_path, dest_path, cpu_gen, use_itpp, self.progress_callback)
 
         # Run the conversion in a separate thread
         conversion_thread = threading.Thread(target=converter.run_conversion)
diff --git a/lnl_spf_2_pythonsv_script_BlackBox_Advanced.py b/lnl_spf_2_pythonsv_script_BlackBox_Advanced.py
index 955e002..7a4aec6 100644
--- a/lnl_spf_2_pythonsv_script_BlackBox_Advanced.py
+++ b/lnl_spf_2_pythonsv_script_BlackBox_Advanced.py
@@ -2,11 +2,10 @@
 # Name:        module1
 # Purpose:
 #
-# Author:      ggontmac, szusin
+# Author:      szusin
 #
 # Created:     11/10/2022
-# Copyright:   (c) ggontmac 2022
-# Licence:     <your licence>
+# Copyright:   (c) szusin 2024
 #-------------------------------------------------------------------------------
 
 #---------######################################################################
@@ -848,7 +847,6 @@ def main():
 
 
     ############################################################################
-    pass
 
 if __name__ == '__main__':
     main()
diff --git a/spf2sv_converter.py b/spf2sv_converter.py
index 3032a66..7558d5a 100644
--- a/spf2sv_converter.py
+++ b/spf2sv_converter.py
@@ -7,7 +7,7 @@ def week_num():
     work_week = date.strftime("%W")
     week_day = (date.isoweekday() % 7) + 1  # Convert from ISO weekday (1-7) to custom weekday (0-6)
     if week_day == 1:
-       work_week = str(int(work_week) + 1)
+        work_week = str(int(work_week) + 1)
     year = str(date.year)[-2:]  # Extract the last two digits of the year
 
     date_format = "ww{}_{:d}'{}".format(work_week, week_day, year)

commit f34d8e255affdee1cfce13dc0789a7382cb17e9a
Author: xhuui <65158386+xhuui@users.noreply.github.com>
Date:   Sat May 25 19:08:31 2024 +0300

    fixed history

diff --git a/LTK_SPF_Converter_V2.pyw b/LTK_SPF_Converter_V2.pyw
index 0f5fdd3..a756036 100644
--- a/LTK_SPF_Converter_V2.pyw
+++ b/LTK_SPF_Converter_V2.pyw
@@ -1,107 +1,137 @@
 import tkinter as tk
 from tkinter import ttk, messagebox, filedialog
-import os, subprocess
+import os
+import subprocess
 import csv
 from datetime import datetime
 import threading
 from conversion_module import Converter
 
+
 class Converter_GUI():
     def __init__(self, root):
         self.history_file = "ltk_spf_history.csv"
         self.create_history_file()
         self.read_history()
 
-        ## window top bar title
+        # window top bar title
         self.root = root
         self.root.title("LTK SPF Converter")
         self.root.minsize(1200, 260)  # Set the minimum window size
 
-        ## create the menu
+        # create the menu
         self.create_menu()
 
-        ## source frame
+        # source frame
         self.source_frame = tk.LabelFrame(root, text='Source')
         self.source_frame.pack(fill='x', pady=10, padx=5)
-        ## source text
+        # source text
         source_label = tk.Label(self.source_frame, text="Input:")
         source_label.pack(side='left', padx=0)
-        ## source radiobuttons
-        self.source_type = tk.StringVar(value='file')  # Variable to hold the source type
-        self.source_file_radiobutton = tk.Radiobutton(self.source_frame, text="File", variable=self.source_type, value='file', command=self.update_combobox)
+        # source radiobuttons
+        # Variable to hold the source type
+        self.source_type = tk.StringVar(value='file')
+        self.source_file_radiobutton = tk.Radiobutton(
+            self.source_frame, text="File", variable=self.source_type, value='file', command=self.update_combobox)
         self.source_file_radiobutton.pack(side='left')
-        self.source_folder_radiobutton = tk.Radiobutton(self.source_frame, text="Folder", variable=self.source_type, value='folder', command=self.update_combobox)
+        self.source_folder_radiobutton = tk.Radiobutton(
+            self.source_frame, text="Folder", variable=self.source_type, value='folder', command=self.update_combobox)
         self.source_folder_radiobutton.pack(side='left')
-        ## select button
-        self.select_button = tk.Button(self.source_frame, text="Select File / Folder", command=self.select_file_folder)
+        # select button
+        self.select_button = tk.Button(
+            self.source_frame, text="Select File / Folder", command=self.select_file_folder)
         self.select_button.pack(side='left', padx=2, pady=5)
-        ## source select combobox
-        self.source_select_combobox = ttk.Combobox(self.source_frame)
+        # source select combobox
+        self.source_select_combobox = ttk.Combobox(
+            self.source_frame, postcommand=self.update_source_history_on_select)
         self.source_select_combobox.pack(fill='x', expand=True, padx=2)
-        ## initially populate the combobox with file history
+        # initially populate the combobox with file history
         self.update_combobox()
 
-        ## destination frame
+        # destination frame
         self.dest_frame = tk.LabelFrame(root, text='Destination')
         self.dest_frame.pack(fill='x', pady=10, padx=5)
-        ## default output folder button
-        self.default_output_button = tk.Button(self.dest_frame, text="Default Output Folder", command=self.set_default_output_folder)
+        # default output folder button
+        self.default_output_button = tk.Button(
+            self.dest_frame, text="Default Output Folder", command=self.set_default_output_folder)
         self.default_output_button.pack(side='left', padx=3, pady=5)
-        ## destination select button
-        self.dest_select_button = tk.Button(self.dest_frame, text="Select Output Folder", command=self.select_output_folder)
+        # destination select button
+        self.dest_select_button = tk.Button(
+            self.dest_frame, text="Select Output Folder", command=self.select_output_folder)
         self.dest_select_button.pack(side='left', padx=2, pady=5)
-        ## destination select combobox
-        self.dest_select_combobox = ttk.Combobox(self.dest_frame)
+        # destination select combobox
+        self.dest_select_combobox = ttk.Combobox(
+            self.dest_frame, postcommand=self.update_dest_history_on_select)
         self.dest_select_combobox.pack(fill='x', expand=True, padx=2)
-        ## initially populate the combobox with destination history
+        # initially populate the combobox with destination history
         self.update_dest_combobox()
 
-        ## Bottom Frame
+        # Bottom Frame
         self.bottom_frame = tk.Frame(root)
         self.bottom_frame.pack(fill='x', pady=5, padx=5)
 
-        ## Bottom Left frame - Options
-        self.options_frame = tk.LabelFrame(self.bottom_frame, text="Options")  # make it a LabelFrame with the title 'Options'
+        # Bottom Left frame - Options
+        # make it a LabelFrame with the title 'Options'
+        self.options_frame = tk.LabelFrame(self.bottom_frame, text="Options")
         self.options_frame.pack(fill='x', padx=5, side='left', anchor='w')
-        ## CPU GEN combobox
+        # CPU GEN combobox
         self.spu_gen_frame = tk.Frame(self.options_frame)
         self.spu_gen_frame.pack()
         self.cpu_gen_label = tk.Label(self.spu_gen_frame, text="CPU Gen:")
         self.cpu_gen_label.pack(side='left', padx=5)
-        self.cpu_gen = ttk.Combobox(self.spu_gen_frame, values=["PTL", "LNL", "MTL-P", "MTL1"])
+        self.cpu_gen = ttk.Combobox(self.spu_gen_frame, values=[
+                                    "PTL", "LNL", "MTL-P", "MTL1"])
         self.cpu_gen.pack(padx=5)
         self.cpu_gen.set("PTL")
-        ## add 'Use itpp Comments' tick button to options frame
+        # add 'Use itpp Comments' tick button to options frame
         self.use_itpp = tk.IntVar()
-        self.use_itpp_checkbutton = tk.Checkbutton(self.options_frame, text="Use itpp Comments", variable=self.use_itpp)
+        self.use_itpp_checkbutton = tk.Checkbutton(
+            self.options_frame, text="Use itpp Comments", variable=self.use_itpp)
         self.use_itpp_checkbutton.pack(anchor='w')
 
-        ## Bottom right frame
+        # Bottom right frame
         self.buttons_frame = tk.Frame(self.bottom_frame)
         self.buttons_frame.pack(side='right', padx=10)
-        self.convert_button = tk.Button(self.buttons_frame, text="Convert", command=self.convert)
+        self.convert_button = tk.Button(
+            self.buttons_frame, text="Convert", command=self.convert)
         self.convert_button.pack(side='right', padx=10)
 
-        ## Progress Bar
+        # Progress Bar
         self.progress = tk.DoubleVar()
-        self.progress_bar = ttk.Progressbar(root, variable=self.progress, maximum=100)
+        self.progress_bar = ttk.Progressbar(
+            root, variable=self.progress, maximum=100)
         self.progress_bar.pack(fill='x', padx=5, pady=5)
 
-        ## Floor Frame
+        # Floor Frame
         self.floor_frame = tk.Frame(root)
-        self.floor_frame.pack(fill='x', pady=5, padx=5, side='bottom', anchor='s')
+        self.floor_frame.pack(fill='x', pady=5, padx=5,
+                              side='bottom', anchor='s')
 
-        ## Software Version
+        # Software Version
         self.version_label = tk.Label(self.floor_frame, text="2.0.0b1")
         self.version_label.pack(side='left')
 
-        ## Copyright
-        self.copyright_label = tk.Label(self.floor_frame, text="┬⌐ 2024 Sivan Zusin")
+        # Copyright
+        self.copyright_label = tk.Label(
+            self.floor_frame, text="┬⌐ 2024 Sivan Zusin")
         self.copyright_label.pack(side='right')
 
     def progress_callback(self, value):
         self.progress.set(value)
 
+    def update_source_history_on_select(self):
+        selected = self.source_select_combobox.get()
+        if selected:
+            self.update_history(self.source_file_history if self.source_type.get(
+            ) == 'file' else self.source_folder_history, selected)
+            self.update_combobox()  # Refresh the combobox with updated history
+
+    def update_dest_history_on_select(self):
+        selected = self.dest_select_combobox.get()
+        if selected:
+            self.update_history(self.dest_history, selected)
+            self.update_dest_combobox()  # Refresh the combobox with updated history
+
     def create_history_file(self):
         # Create history file named ltk_spf_history.csv if it does not exist
         if not os.path.exists(self.history_file):
@@ -141,10 +171,10 @@ class Converter_GUI():
     def show_help(self):
         # Get the directory of the current script
         script_dir = os.path.dirname(os.path.abspath(__file__))
-        
+
         # Search for a .chm file in the directory
         chm_files = [f for f in os.listdir(script_dir) if f.endswith('.chm')]
-        
+
         if chm_files:
             # If there are multiple .chm files, choose the first one
             chm_file = os.path.join(script_dir, chm_files[0])
@@ -183,14 +213,16 @@ class Converter_GUI():
         if self.source_type.get() == 'file':
             file_path = filedialog.askopenfilename()
             if file_path:
-                self.source_file_history.insert(0, file_path)  # Update source file history
+                self.source_file_history.insert(
+                    0, file_path)  # Update source file history
                 self.update_combobox()
                 self.source_select_combobox.set(file_path)
                 base_path = os.path.dirname(file_path)
         else:
             folder_path = filedialog.askdirectory()
             if folder_path:
-                self.source_folder_history.insert(0, folder_path)  # Update source folder history
+                self.source_folder_history.insert(
+                    0, folder_path)  # Update source folder history
                 self.update_combobox()
                 self.source_select_combobox.set(folder_path)
                 base_path = folder_path
@@ -199,7 +231,8 @@ class Converter_GUI():
             # Automatically set the default output folder after source selection
             timestamp = datetime.now().strftime("%d-%m-%y_%H-%M-%S")
             default_folder = os.path.join(base_path, f"LTK_{timestamp}")
-            self.dest_history.insert(0, default_folder)  # Update destination folder history
+            # Update destination folder history
+            self.dest_history.insert(0, default_folder)
             self.update_dest_combobox()
             self.dest_select_combobox.set(default_folder)
 
@@ -220,8 +253,6 @@ class Converter_GUI():
             self.dest_select_combobox.set(default_folder)
             self.save_history()
 
-
-
     def set_default_output_folder(self):
         # Function to handle setting the default output folder
         source_path = self.source_select_combobox.get()
@@ -278,7 +309,7 @@ class Converter_GUI():
         if not dest_path:
             messagebox.showerror("Error", "Destination not selected!")
             return
-        
+
         # save history
         self.save_history()
 
@@ -287,8 +318,9 @@ class Converter_GUI():
         use_itpp = self.use_itpp.get()
 
         # Create an instance of the Converter class
-        converter = Converter(source_path, dest_path, cpu_gen, use_itpp, self.progress_callback)
-        
+        converter = Converter(source_path, dest_path,
+                              cpu_gen, use_itpp, self.progress_callback)
+
         # Run the conversion in a separate thread
         conversion_thread = threading.Thread(target=converter.run_conversion)
         conversion_thread.start()
@@ -300,6 +332,7 @@ class Converter_GUI():
                                         f"CPU Gen: {cpu_gen}\n"
                                         f"Use itpp Comments: {'Yes' if use_itpp else 'No'}")
 
+
 if __name__ == "__main__":
     root = tk.Tk()
     app = Converter_GUI(root)
diff --git a/__pycache__/conversion_module.cpython-311.pyc b/__pycache__/conversion_module.cpython-311.pyc
new file mode 100644
index 0000000..c153737
Binary files /dev/null and b/__pycache__/conversion_module.cpython-311.pyc differ
diff --git a/ltk_spf_history.csv b/ltk_spf_history.csv
index e20719c..c4d88e4 100644
--- a/ltk_spf_history.csv
+++ b/ltk_spf_history.csv
@@ -1,3 +1,3 @@
 C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/TCSS/cmem_tc0_dp_extlb_10_lfsr31.spf,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/TCSS/cmem_tc0_dp_anelb_1p62_lfsr31.spf
 C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/TCSS
-C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/TCSS\LTK_25-05-24_18-40-04,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/TCSS\LTK_25-05-24_18-39-37
+C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/TCSS\LTK_25-05-24_18-39-37,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/TCSS\LTK_25-05-24_18-40-04

commit b87011b5b5111e290e7532e687b2efb42fd43b9f
Author: 12143054-C1 <sivan.zusin@intel.com>
Date:   Sat May 25 18:42:16 2024 +0300

    firs commit

diff --git a/HELP_Compiler/Index.hhk b/HELP_Compiler/Index.hhk
new file mode 100644
index 0000000..c0ba08a
--- /dev/null
+++ b/HELP_Compiler/Index.hhk
@@ -0,0 +1,9 @@
+<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
+<HTML>
+<HEAD>
+<meta name="GENERATOR" content="Microsoft&reg; HTML Help Workshop 4.1">
+<!-- Sitemap 1.0 -->
+</HEAD><BODY>
+<UL>
+</UL>
+</BODY></HTML>
diff --git a/HELP_Compiler/LTK_SPF_HELP.chw b/HELP_Compiler/LTK_SPF_HELP.chw
new file mode 100644
index 0000000..e261f3c
Binary files /dev/null and b/HELP_Compiler/LTK_SPF_HELP.chw differ
diff --git a/HELP_Compiler/LTK_SPF_HELP.hhp b/HELP_Compiler/LTK_SPF_HELP.hhp
new file mode 100644
index 0000000..1d855b2
--- /dev/null
+++ b/HELP_Compiler/LTK_SPF_HELP.hhp
@@ -0,0 +1,13 @@
+[OPTIONS]
+Compatibility=1.1 or later
+Compiled file=LTK_SPF_HELP.chm
+Contents file=Table of Contents.hhc
+Default topic=index.html
+Display compile progress=No
+Index file=Index.hhk
+Language=0x409 English (United States)
+Title=LTK SPF Converter
+
+
+[INFOTYPES]
+
diff --git a/HELP_Compiler/Table of Contents.hhc b/HELP_Compiler/Table of Contents.hhc
new file mode 100644
index 0000000..584abcf
--- /dev/null
+++ b/HELP_Compiler/Table of Contents.hhc	
@@ -0,0 +1,32 @@
+<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
+<HTML>
+<HEAD>
+<meta name="GENERATOR" content="Microsoft&reg; HTML Help Workshop 4.1">
+<!-- Sitemap 1.0 -->
+</HEAD><BODY>
+<OBJECT type="text/site properties">
+	<param name="ImageType" value="Folder">
+</OBJECT>
+<UL>
+	<LI> <OBJECT type="text/sitemap">
+		<param name="Name" value="Home">
+		<param name="Local" value="index.html">
+		</OBJECT>
+	<LI> <OBJECT type="text/sitemap">
+		<param name="Name" value="Selecting Input File/Folder">
+		<param name="Local" value="select_file.html">
+		</OBJECT>
+	<LI> <OBJECT type="text/sitemap">
+		<param name="Name" value="Selecting Output Folder">
+		<param name="Local" value="select_output.html">
+		</OBJECT>
+	<LI> <OBJECT type="text/sitemap">
+		<param name="Name" value="Conversion Options">
+		<param name="Local" value="conversion_options.html">
+		</OBJECT>
+	<LI> <OBJECT type="text/sitemap">
+		<param name="Name" value="Converting Files">
+		<param name="Local" value="convert.html">
+		</OBJECT>
+</UL>
+</BODY></HTML>
diff --git a/HELP_Compiler/conversion_options.html b/HELP_Compiler/conversion_options.html
new file mode 100644
index 0000000..4b042a5
--- /dev/null
+++ b/HELP_Compiler/conversion_options.html
@@ -0,0 +1,17 @@
+<!DOCTYPE html>
+<html lang="en">
+<head>
+    <meta charset="UTF-8">
+    <meta name="viewport" content="width=device-width, initial-scale=1.0">
+    <title>Conversion Options - LTK SPF Converter Help</title>
+</head>
+<body>
+    <h1>Conversion Options</h1>
+    <p>To specify conversion options, follow these steps:</p>
+    <ol>
+        <li>In the "Options" section of the application, locate the "CPU Gen" dropdown menu.</li>
+        <li>Select the appropriate CPU generation from the options available: PTL, LNL, MTL-P, MTL1.</li>
+        <li>If you want to include itpp comments in the conversion, check the "Use itpp Comments" checkbox.</li>
+    </ol>
+</body>
+</html>
diff --git a/HELP_Compiler/convert.html b/HELP_Compiler/convert.html
new file mode 100644
index 0000000..52eda17
--- /dev/null
+++ b/HELP_Compiler/convert.html
@@ -0,0 +1,19 @@
+<!DOCTYPE html>
+<html lang="en">
+<head>
+    <meta charset="UTF-8">
+    <meta name="viewport" content="width=device-width, initial-scale=1.0">
+    <title>Converting Files - LTK SPF Converter Help</title>
+</head>
+<body>
+    <h1>Converting Files</h1>
+    <p>To convert files, follow these steps:</p>
+    <ol>
+        <li>Ensure that you have selected both the input source and output destination.</li>
+        <li>Check the conversion options and make any necessary changes.</li>
+        <li>Click the "Convert" button located in the bottom right corner of the application.</li>
+        <li>A message box will appear showing the details of the conversion. Verify these details before proceeding.</li>
+        <li>After verifying the details, the conversion process will start and the converted files will be saved to the selected output folder.</li>
+    </ol>
+</body>
+</html>
diff --git a/HELP_Compiler/crown.png b/HELP_Compiler/crown.png
new file mode 100644
index 0000000..0104f41
Binary files /dev/null and b/HELP_Compiler/crown.png differ
diff --git a/HELP_Compiler/index.html b/HELP_Compiler/index.html
new file mode 100644
index 0000000..13023ad
--- /dev/null
+++ b/HELP_Compiler/index.html
@@ -0,0 +1,66 @@
+<!DOCTYPE html>
+<html lang="en">
+<head>
+    <meta charset="UTF-8">
+    <meta name="viewport" content="width=device-width, initial-scale=1.0">
+    <title>LTK SPF Converter Help</title>
+    <style>
+        body {
+            position: relative;
+            padding-top: 50px; /* Ensure content doesn't overlap the icon */
+        }
+        .icon-container {
+            position: absolute;
+            top: 10px;
+            left: 10px; /* Position the icon on the left */
+        }
+        .icon-container img {
+            width: 50px; /* Adjust the size of the icon */
+            height: auto;
+        }
+    </style>
+</head>
+<body>
+    <div class="icon-container">
+        <img src="crown.png" alt="Icon">
+    </div>
+    <h1>LTK SPF Converter Help</h1>
+    <p>Welcome to the help documentation for the LTK SPF Converter application.</p>
+    <p>This program is designed to convert .spf files used in the HVM <i>(High Volume Manufacturing)</i> environment to Python files that are compatible with the PythonSV environment.</p>
+
+    <h2>Usage</h2>
+    <p>For detailed instructions on using the application, please refer to the corresponding sections below.</p>
+    <ul>
+        <li><a href="select_file.html">Selecting Input File/Folder</a></li>
+        <li><a href="select_output.html">Selecting Output Folder</a></li>
+        <li><a href="conversion_options.html">Conversion Options</a></li>
+        <li><a href="convert.html">Converting Files</a></li>
+    </ul>
+
+    <h2>Workflow</h2>
+    <p>Follow these steps to use the LTK SPF Converter:</p>
+    <ol>
+        <li>Open the application by running the Python script.</li>
+        <li>In the "Source" section, select whether you want to convert a file or a folder by choosing the appropriate radio button.</li>
+        <li>Click on the "Select File / Folder" button to open a file dialog and choose the file or folder you want to convert.</li>
+        <li>Once selected, the path of the file or folder will appear in the combo box next to the button.</li>
+        <li>In the "Output" section, click on the "Select Output Folder" button to choose where you want the converted files to be saved.</li>
+        <li>Alternatively, you can click on the "Default Output Folder" button to set a default folder for the output.</li>
+        <li>Specify any additional conversion options in the "Options" section:
+            <ul>
+                <li>Choose the CPU generation from the "CPU Gen" dropdown menu.</li>
+                <li>Check the "Use itpp Comments" checkbox if you want to include itpp comments in the conversion.</li>
+            </ul>
+        </li>
+        <li>Once all options are set, click on the "Convert" button in the bottom right corner to start the conversion process.</li>
+        <li>A message box will appear showing the details of the conversion, including the source and destination paths, CPU generation, and whether itpp comments are used.</li>
+    </ol>
+
+    <h2>Tips</h2>
+    <ul>
+        <li>The destination folder is set automatically when the source file or folder is selected.</li>
+        <li>Make sure to check the conversion details in the message box before proceeding.</li>
+        <li>You can clear the history of selected files and folders from the top menu.</li>
+    </ul>
+</body>
+</html>
diff --git a/HELP_Compiler/select_file.html b/HELP_Compiler/select_file.html
new file mode 100644
index 0000000..119b8ff
--- /dev/null
+++ b/HELP_Compiler/select_file.html
@@ -0,0 +1,19 @@
+<!DOCTYPE html>
+<html lang="en">
+<head>
+    <meta charset="UTF-8">
+    <meta name="viewport" content="width=device-width, initial-scale=1.0">
+    <title>Selecting Input File/Folder - LTK SPF Converter Help</title>
+</head>
+<body>
+    <h1>Selecting Input File/Folder</h1>
+    <p>To select the input file or folder, follow these steps:</p>
+    <ol>
+        <li>Open the application and look at the "Source" section.</li>
+        <li>Select either the "File" or "Folder" radio button based on what you want to convert.</li>
+        <li>Click the "Select File / Folder" button to open a file dialog.</li>
+        <li>Navigate to the desired file or folder and select it.</li>
+        <li>The path of the selected file or folder will appear in the combo box next to the button.</li>
+    </ol>
+</body>
+</html>
diff --git a/HELP_Compiler/select_output.html b/HELP_Compiler/select_output.html
new file mode 100644
index 0000000..0e8ebdb
--- /dev/null
+++ b/HELP_Compiler/select_output.html
@@ -0,0 +1,18 @@
+<!DOCTYPE html>
+<html lang="en">
+<head>
+    <meta charset="UTF-8">
+    <meta name="viewport" content="width=device-width, initial-scale=1.0">
+    <title>Selecting Output Folder - LTK SPF Converter Help</title>
+</head>
+<body>
+    <h1>Selecting Output Folder</h1>
+    <p>To select the output folder where converted files will be saved, follow these steps:</p>
+    <ol>
+        <li>In the "Destination" section, click the "Select Output Folder" button to open a folder dialog.</li>
+        <li>Navigate to the desired output folder and select it.</li>
+        <li>The path of the selected output folder will appear in the combo box next to the button.</li>
+    </ol>
+    <p>Alternatively, you can click the "Default Output Folder" button to set a default folder for the output, which will be created based on the source folder's location and the current timestamp.</p>
+</body>
+</html>
diff --git a/LTK_SPF_Converter_V2.pyw b/LTK_SPF_Converter_V2.pyw
new file mode 100644
index 0000000..0f5fdd3
--- /dev/null
+++ b/LTK_SPF_Converter_V2.pyw
@@ -0,0 +1,306 @@
+import tkinter as tk
+from tkinter import ttk, messagebox, filedialog
+import os, subprocess
+import csv
+from datetime import datetime
+import threading
+from conversion_module import Converter
+
+class Converter_GUI():
+    def __init__(self, root):
+        self.history_file = "ltk_spf_history.csv"
+        self.create_history_file()
+        self.read_history()
+
+        ## window top bar title
+        self.root = root
+        self.root.title("LTK SPF Converter")
+        self.root.minsize(1200, 260)  # Set the minimum window size
+
+        ## create the menu
+        self.create_menu()
+
+        ## source frame
+        self.source_frame = tk.LabelFrame(root, text='Source')
+        self.source_frame.pack(fill='x', pady=10, padx=5)
+        ## source text
+        source_label = tk.Label(self.source_frame, text="Input:")
+        source_label.pack(side='left', padx=0)
+        ## source radiobuttons
+        self.source_type = tk.StringVar(value='file')  # Variable to hold the source type
+        self.source_file_radiobutton = tk.Radiobutton(self.source_frame, text="File", variable=self.source_type, value='file', command=self.update_combobox)
+        self.source_file_radiobutton.pack(side='left')
+        self.source_folder_radiobutton = tk.Radiobutton(self.source_frame, text="Folder", variable=self.source_type, value='folder', command=self.update_combobox)
+        self.source_folder_radiobutton.pack(side='left')
+        ## select button
+        self.select_button = tk.Button(self.source_frame, text="Select File / Folder", command=self.select_file_folder)
+        self.select_button.pack(side='left', padx=2, pady=5)
+        ## source select combobox
+        self.source_select_combobox = ttk.Combobox(self.source_frame)
+        self.source_select_combobox.pack(fill='x', expand=True, padx=2)
+        ## initially populate the combobox with file history
+        self.update_combobox()
+
+        ## destination frame
+        self.dest_frame = tk.LabelFrame(root, text='Destination')
+        self.dest_frame.pack(fill='x', pady=10, padx=5)
+        ## default output folder button
+        self.default_output_button = tk.Button(self.dest_frame, text="Default Output Folder", command=self.set_default_output_folder)
+        self.default_output_button.pack(side='left', padx=3, pady=5)
+        ## destination select button
+        self.dest_select_button = tk.Button(self.dest_frame, text="Select Output Folder", command=self.select_output_folder)
+        self.dest_select_button.pack(side='left', padx=2, pady=5)
+        ## destination select combobox
+        self.dest_select_combobox = ttk.Combobox(self.dest_frame)
+        self.dest_select_combobox.pack(fill='x', expand=True, padx=2)
+        ## initially populate the combobox with destination history
+        self.update_dest_combobox()
+
+        ## Bottom Frame
+        self.bottom_frame = tk.Frame(root)
+        self.bottom_frame.pack(fill='x', pady=5, padx=5)
+
+        ## Bottom Left frame - Options
+        self.options_frame = tk.LabelFrame(self.bottom_frame, text="Options")  # make it a LabelFrame with the title 'Options'
+        self.options_frame.pack(fill='x', padx=5, side='left', anchor='w')
+        ## CPU GEN combobox
+        self.spu_gen_frame = tk.Frame(self.options_frame)
+        self.spu_gen_frame.pack()
+        self.cpu_gen_label = tk.Label(self.spu_gen_frame, text="CPU Gen:")
+        self.cpu_gen_label.pack(side='left', padx=5)
+        self.cpu_gen = ttk.Combobox(self.spu_gen_frame, values=["PTL", "LNL", "MTL-P", "MTL1"])
+        self.cpu_gen.pack(padx=5)
+        self.cpu_gen.set("PTL")
+        ## add 'Use itpp Comments' tick button to options frame
+        self.use_itpp = tk.IntVar()
+        self.use_itpp_checkbutton = tk.Checkbutton(self.options_frame, text="Use itpp Comments", variable=self.use_itpp)
+        self.use_itpp_checkbutton.pack(anchor='w')
+
+        ## Bottom right frame
+        self.buttons_frame = tk.Frame(self.bottom_frame)
+        self.buttons_frame.pack(side='right', padx=10)
+        self.convert_button = tk.Button(self.buttons_frame, text="Convert", command=self.convert)
+        self.convert_button.pack(side='right', padx=10)
+
+        ## Progress Bar
+        self.progress = tk.DoubleVar()
+        self.progress_bar = ttk.Progressbar(root, variable=self.progress, maximum=100)
+        self.progress_bar.pack(fill='x', padx=5, pady=5)
+
+        ## Floor Frame
+        self.floor_frame = tk.Frame(root)
+        self.floor_frame.pack(fill='x', pady=5, padx=5, side='bottom', anchor='s')
+
+        ## Software Version
+        self.version_label = tk.Label(self.floor_frame, text="2.0.0b1")
+        self.version_label.pack(side='left')
+
+        ## Copyright
+        self.copyright_label = tk.Label(self.floor_frame, text="┬⌐ 2024 Sivan Zusin")
+        self.copyright_label.pack(side='right')
+
+    def progress_callback(self, value):
+        self.progress.set(value)
+
+    def create_history_file(self):
+        # Create history file named ltk_spf_history.csv if it does not exist
+        if not os.path.exists(self.history_file):
+            with open(self.history_file, mode='w', newline='') as file:
+                writer = csv.writer(file)
+                writer.writerow([])  # File source history
+                writer.writerow([])  # Folder source history
+                writer.writerow([])  # Destination history
+
+    def read_history(self):
+        # Read the history into self.source_history and self.dest_history
+        self.source_file_history = []
+        self.source_folder_history = []
+        self.dest_history = []
+
+        with open(self.history_file, mode='r', newline='') as file:
+            reader = csv.reader(file)
+            rows = list(reader)
+            if len(rows) > 0:
+                self.source_file_history = rows[0]
+            if len(rows) > 1:
+                self.source_folder_history = rows[1]
+            if len(rows) > 2:
+                self.dest_history = rows[2]
+
+    def create_menu(self):
+        # Create the top menu with 'LTK' button
+        menubar = tk.Menu(self.root)
+        ltk_menu = tk.Menu(menubar, tearoff=0)
+        ltk_menu.add_command(label="Help", command=self.show_help)
+        ltk_menu.add_command(label="Clear History", command=self.clear_history)
+        ltk_menu.add_separator()
+        ltk_menu.add_command(label="Exit", command=self.root.quit)
+        menubar.add_cascade(label="Menu", menu=ltk_menu)
+        self.root.config(menu=menubar)
+
+    def show_help(self):
+        # Get the directory of the current script
+        script_dir = os.path.dirname(os.path.abspath(__file__))
+        
+        # Search for a .chm file in the directory
+        chm_files = [f for f in os.listdir(script_dir) if f.endswith('.chm')]
+        
+        if chm_files:
+            # If there are multiple .chm files, choose the first one
+            chm_file = os.path.join(script_dir, chm_files[0])
+            # Open the CHM file using the default CHM viewer
+            subprocess.Popen(["hh.exe", chm_file])
+        else:
+            messagebox.showerror("Error", "Help file not found!")
+
+    def clear_history(self):
+        if messagebox.askyesno("Clear History", "Are you sure you want to clear the history?"):
+            with open(self.history_file, mode='w', newline='') as file:
+                writer = csv.writer(file)
+                writer.writerow([])  # Clear file source history
+                writer.writerow([])  # Clear folder source history
+                writer.writerow([])  # Clear destination history
+            self.read_history()
+            self.update_combobox()
+            self.update_dest_combobox()
+
+    def update_dest_based_on_source(self, event):
+        source_path = self.source_select_combobox.get()
+        if source_path:
+            if self.source_type.get() == 'file':
+                base_path = os.path.dirname(source_path)
+            else:
+                base_path = source_path
+
+            timestamp = datetime.now().strftime("%d-%m-%y_%H-%M-%S")
+            default_folder = os.path.join(base_path, f"LTK_{timestamp}")
+            self.update_history(self.dest_history, default_folder)
+            self.update_dest_combobox()
+            self.dest_select_combobox.set(default_folder)
+
+    def select_file_folder(self):
+        # Function to handle file/folder selection
+        if self.source_type.get() == 'file':
+            file_path = filedialog.askopenfilename()
+            if file_path:
+                self.source_file_history.insert(0, file_path)  # Update source file history
+                self.update_combobox()
+                self.source_select_combobox.set(file_path)
+                base_path = os.path.dirname(file_path)
+        else:
+            folder_path = filedialog.askdirectory()
+            if folder_path:
+                self.source_folder_history.insert(0, folder_path)  # Update source folder history
+                self.update_combobox()
+                self.source_select_combobox.set(folder_path)
+                base_path = folder_path
+
+        if base_path:
+            # Automatically set the default output folder after source selection
+            timestamp = datetime.now().strftime("%d-%m-%y_%H-%M-%S")
+            default_folder = os.path.join(base_path, f"LTK_{timestamp}")
+            self.dest_history.insert(0, default_folder)  # Update destination folder history
+            self.update_dest_combobox()
+            self.dest_select_combobox.set(default_folder)
+
+    def select_output_folder(self):
+        # Function to handle output folder selection
+        folder_path = filedialog.askdirectory()
+        if folder_path:
+            self.update_history(self.dest_history, folder_path)
+            self.update_dest_combobox()
+            self.dest_select_combobox.set(folder_path)
+            self.save_history()
+
+            # Automatically set the default output folder after destination selection
+            timestamp = datetime.now().strftime("%d-%m-%y_%H-%M-%S")
+            default_folder = os.path.join(folder_path, f"LTK_{timestamp}")
+            self.update_history(self.dest_history, default_folder)
+            self.update_dest_combobox()
+            self.dest_select_combobox.set(default_folder)
+            self.save_history()
+
+
+
+    def set_default_output_folder(self):
+        # Function to handle setting the default output folder
+        source_path = self.source_select_combobox.get()
+        if not source_path:
+            messagebox.showerror("Error", "Source not selected!")
+            return
+
+        if self.source_type.get() == 'file':
+            base_path = os.path.dirname(source_path)
+        else:
+            base_path = source_path
+
+        timestamp = datetime.now().strftime("%d-%m-%y_%H-%M-%S")
+        default_folder = os.path.join(base_path, f"LTK_{timestamp}")
+
+        self.update_history(self.dest_history, default_folder)
+        self.update_dest_combobox()
+        self.dest_select_combobox.set(default_folder)
+        self.save_history()
+
+    def update_history(self, history, item):
+        # Update the history to behave like a stack
+        if item in history:
+            history.remove(item)
+        history.insert(0, item)
+
+    def save_history(self):
+        # Save the updated histories to the CSV file only when 'Convert' button is pressed
+        with open(self.history_file, mode='w', newline='') as file:
+            writer = csv.writer(file)
+            writer.writerow(self.source_file_history)
+            writer.writerow(self.source_folder_history)
+            writer.writerow(self.dest_history)
+
+    def update_combobox(self):
+        # Update the combobox items based on the selected source type (file or folder)
+        if self.source_type.get() == 'file':
+            self.source_select_combobox['values'] = self.source_file_history
+        else:
+            self.source_select_combobox['values'] = self.source_folder_history
+        self.save_history()
+
+    def update_dest_combobox(self):
+        # Update the combobox items for the destination history
+        self.dest_select_combobox['values'] = self.dest_history
+
+    def convert(self):
+        # Check if source and destination are selected, if not raise an error
+        source_path = self.source_select_combobox.get()
+        dest_path = self.dest_select_combobox.get()
+        if not source_path:
+            messagebox.showerror("Error", "Source not selected!")
+            return
+        if not dest_path:
+            messagebox.showerror("Error", "Destination not selected!")
+            return
+        
+        # save history
+        self.save_history()
+
+        # Gather conversion details
+        cpu_gen = self.cpu_gen.get()
+        use_itpp = self.use_itpp.get()
+
+        # Create an instance of the Converter class
+        converter = Converter(source_path, dest_path, cpu_gen, use_itpp, self.progress_callback)
+        
+        # Run the conversion in a separate thread
+        conversion_thread = threading.Thread(target=converter.run_conversion)
+        conversion_thread.start()
+
+        # Display conversion details
+        messagebox.showinfo("Convert",  f"Convert button clicked.\n"
+                                        f"Source: {source_path}\n"
+                                        f"Destination: {dest_path}\n"
+                                        f"CPU Gen: {cpu_gen}\n"
+                                        f"Use itpp Comments: {'Yes' if use_itpp else 'No'}")
+
+if __name__ == "__main__":
+    root = tk.Tk()
+    app = Converter_GUI(root)
+    root.mainloop()
diff --git a/LTK_SPF_HELP.chm b/LTK_SPF_HELP.chm
new file mode 100644
index 0000000..b8b7294
Binary files /dev/null and b/LTK_SPF_HELP.chm differ
diff --git a/LTK_SPF_HELP.chw b/LTK_SPF_HELP.chw
new file mode 100644
index 0000000..2f06d44
Binary files /dev/null and b/LTK_SPF_HELP.chw differ
diff --git a/Tools/tap_debugger.py b/Tools/tap_debugger.py
new file mode 100644
index 0000000..6d2803f
--- /dev/null
+++ b/Tools/tap_debugger.py
@@ -0,0 +1,87 @@
+import os
+
+class Debugger:
+    def __init__(self):
+        """
+        Tools for LTK converter
+        """
+        
+    def get_all_taps(self, folder_path):
+        self.folder_path = folder_path
+        tap_names = set()
+        register_names = set()
+
+        # Read all .spf files in the folder
+        for filename in os.listdir(self.folder_path):
+            if filename.endswith('.spf'):
+                with open(os.path.join(self.folder_path, filename), 'r') as file:
+                    for line in file:
+                        # Find tap names
+                        if 'focus_tap ' in line:
+                            start_index = line.find('focus_tap ') + len('focus_tap ')
+                            end_index = line.find(';', start_index)
+                            if end_index != -1:
+                                tap_name = line[start_index:end_index].strip()
+                                tap_names.add(tap_name)
+                        
+                        # Find register names
+                        if 'set ' in line and '->' in line:
+                            start_index = line.find('set ') + len('set ')
+                            end_index = line.find('->', start_index)
+                            if end_index != -1:
+                                register_name = line[start_index:end_index].strip()
+                                register_names.add(register_name)
+        
+        # Write unique tap names to taps.txt
+        with open(r'sio\LNL\sio_dv\users\szusin\taps.txt', 'w') as taps_file:
+            for tap_name in sorted(tap_names):  # Sort to make it organized
+                taps_file.write(tap_name + '\n')
+        
+        # Write unique register names to regs.txt
+        with open(r'sio\LNL\sio_dv\users\szusin\regs.txt', 'w') as regs_file:
+            for register_name in sorted(register_names):  # Sort to make it organized
+                regs_file.write(register_name + '\n')
+
+    def generate_sv_copypasta(self):
+        regs = []
+        with open(r'sio\LNL\sio_dv\users\szusin\regs.txt', 'r') as regs_file:
+            regs = regs_file.readlines()
+            for i,reg in enumerate(regs):
+                regs[i] = f'print(sv.socket0.soc.search("{reg[:-1]}"))\n'
+        with open(r'sio\LNL\sio_dv\users\szusin\copypasta_regs.txt', 'w') as regs_file:
+            regs_file.writelines(regs)
+    
+    def output_dict_from_copypasta_response(self):
+        taps = set()
+        with open(r'sio\LNL\sio_dv\users\szusin\copypasta_response.txt', 'r') as response_file:
+            lines = response_file.readlines()
+            for line in lines:
+                tap = line.split("'")[1]
+                tap = tap.split(".")[:-1]
+                tap_ = ""
+                for t in tap:
+                    tap_ += f"{t}."
+                tap = tap_[:-1]
+                taps.add(tap)
+        self.sv_taps = taps
+
+    def create_tap_dict(self):
+        self.output_dict_from_copypasta_response()
+        spf_taps = []
+        with open(r'sio\LNL\sio_dv\users\szusin\taps.txt', 'r') as taps_file:
+            spf_taps = taps_file.readlines()
+        content = "\n"
+        for spf_tap in spf_taps:
+            for sv_tap in self.sv_taps:
+                a = spf_tap.lower()[:-6]
+                b = spf_tap.lower()[:-5]
+                if a in sv_tap or b in sv_tap:
+                    content += f"r'{spf_tap[:-1]}' : r'{sv_tap}',\n"
+        codelines = "self.focus_tap_dict = {%s}"%content
+        print(codelines)
+        
+deb = Debugger()
+
+deb.get_all_taps(r'C:\Users\szusin\OneDrive - Intel Corporation\Documents\PTL\SPFs\TCSS')
+deb.generate_sv_copypasta()
+deb.create_tap_dict()
diff --git a/USE_EXAMPLE.py b/USE_EXAMPLE.py
new file mode 100644
index 0000000..f03a87c
--- /dev/null
+++ b/USE_EXAMPLE.py
@@ -0,0 +1,9 @@
+def use_example(direct_reg,input_dir,output_dir,week_folder_en,log_file_path,conversion_time,CPUgen='PTL'):
+    import os,sys
+    import sys
+    #sys.path.append(os.getcwd())
+    from spfs_source import spf2sv_converter
+    # input_dir  = r"C:\pythonsv\atdio\sio\LNL\sio_dv\spfs_source\ww22_2'23\ILB_eDP_eDP"             # r"C:\pythonsv\lunarlake\debug\domains\sio_dv\spfs_source\9_1" #
+    # output_dir = r"C:\pythonsv\atdio\sio\LNL\sio_dv\spfs_pysv_ready"             # r"C:\pythonsv\lunarlake\debug\domains\sio_dv\spfs_pysv_ready\Current" # r"C:\Scripts\spf conversion sandbox\output lib"
+    print(f"input_dir= {input_dir}\noutput_dir= {output_dir}\nweek_folder_en= {week_folder_en}\ndirect_reg= {direct_reg}\n")
+    spf2sv_converter.run(direct_reg,conversion_time,log_file_path,week_folder_en,input_dir,output_dir,CPUgen=CPUgen)
diff --git a/__pycache__/conversion_module.cpython-310.pyc b/__pycache__/conversion_module.cpython-310.pyc
new file mode 100644
index 0000000..6fdd5f3
Binary files /dev/null and b/__pycache__/conversion_module.cpython-310.pyc differ
diff --git a/conversion_module.py b/conversion_module.py
new file mode 100644
index 0000000..2855fdf
--- /dev/null
+++ b/conversion_module.py
@@ -0,0 +1,40 @@
+# conversion_module.py
+import os
+import time
+
+class Converter:
+    def __init__(self, source_path, dest_path, cpu_gen, use_itpp, progress_callback=None):
+        self.source_path = source_path
+        self.dest_path = dest_path
+        self.cpu_gen = cpu_gen
+        self.use_itpp = use_itpp
+        self.progress_callback = progress_callback
+
+    def run_conversion(self):
+        try:
+            if not os.path.exists(self.dest_path):
+                os.makedirs(self.dest_path)
+
+            if os.path.isdir(self.source_path):
+                files = os.listdir(self.source_path)
+                total_files = len(files)
+                for i, file in enumerate(files):
+                    # Simulating conversion for each file
+                    time.sleep(0.1)  # Simulating a long-running process
+                    if self.progress_callback:
+                        progress = int((i + 1) / total_files * 100)
+                        self.progress_callback(progress)
+            else:
+                # Simulate conversion for a single file
+                time.sleep(0.1)  # Simulating a long-running process
+                if self.progress_callback:
+                    self.progress_callback(100)
+            
+            with open(os.path.join(self.dest_path, 'conversion_log.txt'), 'w') as f:
+                f.write(f"Source: {self.source_path}\n")
+                f.write(f"Destination: {self.dest_path}\n")
+                f.write(f"CPU Gen: {self.cpu_gen}\n")
+                f.write(f"Use ITPP Comments: {'Yes' if self.use_itpp else 'No'}\n")
+            print(f"Conversion completed for {self.source_path} to {self.dest_path}")
+        except Exception as e:
+            print(f"Error during conversion: {e}")
diff --git a/crown.ico b/crown.ico
new file mode 100644
index 0000000..876fc9f
Binary files /dev/null and b/crown.ico differ
diff --git a/lnl_spf_2_pythonsv_script_BlackBox_Advanced.py b/lnl_spf_2_pythonsv_script_BlackBox_Advanced.py
new file mode 100644
index 0000000..955e002
--- /dev/null
+++ b/lnl_spf_2_pythonsv_script_BlackBox_Advanced.py
@@ -0,0 +1,854 @@
+#-------------------------------------------------------------------------------
+# Name:        module1
+# Purpose:
+#
+# Author:      ggontmac, szusin
+#
+# Created:     11/10/2022
+# Copyright:   (c) ggontmac 2022
+# Licence:     <your licence>
+#-------------------------------------------------------------------------------
+
+#---------######################################################################
+# IMPORTS ######################################################################
+#---------######################################################################
+import sys, os, time, math, re
+
+
+#---------######################################################################
+# GLOBALS ######################################################################
+#---------######################################################################
+
+
+
+#-----------####################################################################
+# FUNCTIONS ####################################################################
+#-----------####################################################################
+def get_and_set_IO(dirpath,filename,path_offset):
+    input_path = os.path.join(dirpath, filename)
+    out_file_name = input_path.split("\\")[-1].replace(".spf",".py").replace(".SPF",".py")
+    output_path_arrL = input_path.split("\\")[:path_offset]
+    output_path_arrR = input_path.split("\\")[path_offset:-1]
+    output_path = ""
+    for pathBit in output_path_arrL:
+        output_path += pathBit+"\\"
+    output_path += "TRANSLATED\\"
+    try:
+        os.mkdir(output_path)
+    except:
+        pass
+    for pathBit in output_path_arrR:
+        output_path += pathBit+"\\"
+        try:
+            os.mkdir(output_path)
+        except:
+            pass
+    output_path += out_file_name
+##    print ("INPUT:    "+input_path)
+##    print ("OUTPUT:   "+output_path)
+    paths = {   "input"  : input_path,
+                "output" : output_path}
+    return paths
+
+def context_search_and_print(string, directory, Context_size):
+    def number_helper_10000(number):
+        num_len = len(str(number))
+        space = " "
+        for i in range(5-num_len):
+            space += " "
+        return(str(number) + space)
+
+    for root, dirs, files in os.walk(directory):
+        for file in files:
+            if not file.endswith(".spf"):
+                continue
+            file_path = os.path.join(root, file)
+            with open(file_path, 'r') as f:
+                lines = f.readlines()
+                for i, line in enumerate(lines):
+                    if re.search(string, line):
+                        print(file_path)
+                        print("Line Numbers: %s - %s"%(i-Context_size if  i-Context_size > 0 else 0,i+Context_size if i+Context_size < len(lines) else len(lines)))
+                        # 10 lines before
+                        for j in range(Context_size+1,1,-1):
+                            if i-j >=0:
+                                print(number_helper_10000(i-j+1) + ": ", lines[i-j],end="")
+                        # The Line
+                        print(number_helper_10000(i) + ">>",line,end="")
+                        # 10 lines after
+                        for j in range(0,Context_size+1):
+                            if i+j < len(lines):
+                                print(number_helper_10000(i+j+1) + ": ", lines[i+j],end="")
+                        input("Press Enter to continue...")
+                        exit()
+
+
+
+
+
+
+
+
+#-------------##################################################################
+# DEFINITIONS ##################################################################
+#-------------##################################################################
+
+
+
+
+
+
+
+class Command():
+    def __init__(self, _Root_Path="", _FilePath = "",_Output_Root_Dir = "", _CPU_Gen = "PTL",direct_reg = False):
+        import sys, os, time, math
+        self.spf_comments = True
+        self.labels = True
+        self.focus_tap_sv = []
+        self.param_read = []
+        self.param_write = []
+        self.prev_reg = ""
+        self.reg_name = ""
+        self.full_reg_name = ""
+        self.prev_row = ""
+        self.flush_flag = False
+        self.print_last_label = False
+        self.itpp_reg_name = ""
+        self.comment_reg_name_flag = 0
+        self.itpp_compare_targets = ""
+        self.FilePath = _FilePath
+        self.Root_Path = _Root_Path
+        self.Output_Root_Dir = _Output_Root_Dir
+        self.CPU_Gen =_CPU_Gen
+        self.svPath = r"sv.socket0."
+        if self.CPU_Gen == "LNL":
+            self.focus_tap_dict = {
+                r"DFX_PAR_IOM_TAPLINKNW_PHY_FIA_0_CDU_APOLLO0_TAP"    : r"soc.taps.dfx_par_iom_taplinknw_phy_fia_0_cdu_apollo0.",
+                r"DFX_PAR_IOM_TAPLINKNW_PHY_FIA_0_CDU_APOLLO1_TAP"    : r"soc.taps.dfx_par_iom_taplinknw_phy_fia_0_cdu_apollo1.",
+                r"DFX_PAR_IOM_TAPLINKNW_PHY_FIA_1_CDU_APOLLO0_TAP"    : r"soc.taps.dfx_par_iom_taplinknw_phy_fia_1_cdu_apollo0.",
+                r"DFX_PAR_IOM_TAPLINKNW_PHY_FIA_1_CDU_APOLLO1_TAP"    : r"soc.taps.dfx_par_iom_taplinknw_phy_fia_1_cdu_apollo1.",
+                r"DFX_PAR_IOM_TAPLINKNW_PHY_FIA_0_MG0_TAP0"           : r"soc.taps.dfx_par_iom_taplinknw_phy_fia_0_mg0_tap0.",
+                r"TPSB_STAP"                                          : r"soc.taps.tpsb.",
+                r"IPU_STAP"                                           : r"soc.taps.ipu.",
+                r"NPK_STAP"                                           : r"soc.taps.npk.",
+                r"GPIOCOM0_STAP"                                      : r"soc.taps.gpio.com0.sb.",
+                r"GPIOCOM1_STAP"                                      : r"soc.taps.gpio.com1.sb.",
+                r"GPIOCOM3_STAP"                                      : r"soc.taps.gpio.com3.sb.",
+                r"GPIOCOM4_STAP"                                      : r"soc.taps.gpio.com4.sb.",
+                r"GPIOCOM5_STAP"                                      : r"soc.taps.gpio.com5.sb.",
+                r"TAP2IOSFSB_GP"                                      : r"cdie.taps.cdie_tap2iosfsb_gp.",
+                r"PMC_HVM_STAP"                                       : r"soc.taps.pmc_hvm.",
+                r"DFX_PAREDP_STAP"                                    : r"soc.taps.dfx_paredp.",
+                r"DFX_PARPXPBG5PHY_STAP"                              : r"soc.taps.dfx_parpxpbg5phy.",
+                r"DFX_PARPXPAMPPHY_STAP"                              : r"soc.taps.dfx_parpxpampphy.",
+                r"TAM_STAP"                                           : r"soc.taps.tam."
+                }
+        elif self.CPU_Gen == "MTL1":
+            self.focus_tap_dict = {
+                r"DFX_PAR_IOM_TAPLINKNW_PHY_FIA_0_CDU_APOLLO0_TAP"    : r"soc.taps.dfx_par_iom_taplinknw_phy_fia_0_cdu_apollo0.",
+                r"DFX_PAR_IOM_TAPLINKNW_PHY_FIA_1_CDU_APOLLO0_TAP"    : r"soc.taps.dfx_par_iom_taplinknw_phy_fia_1_cdu_apollo0.",
+                r"DFX_PAR_IOM_TAPLINKNW_PHY_FIA_0_MG0_TAP0"           : r"soc.taps.dfx_par_iom_taplinknw_phy_fia_0_mg0_tap0.",
+                r"TPSB_STAP"                                          : r"soc.north.taps.tap2iosfsb_gp.", # r"soc.south.taps.tpsb.",
+                r"IPU_STAP"                                           : r"soc.taps.ipu.",
+                r"NPK_STAP"                                           : r"soc.taps.npk.",
+                r"GPIOCOM0_STAP"                                      : r"soc.taps.gpio.com0.sb.",
+                r"GPIOCOM1_STAP"                                      : r"soc.taps.gpio.com1.sb.",
+                r"GPIOCOM3_STAP"                                      : r"soc.taps.gpio.com3.sb.",
+                r"GPIOCOM4_STAP"                                      : r"soc.taps.gpio.com4.sb.",
+                r"GPIOCOM5_STAP"                                      : r"soc.taps.gpio.com5.sb.",
+                r"TAP2IOSFSB_GP"                                      : r"soc.north.taps.tap2iosfsb_gp.",
+                r"PMC_HVM_STAP"                                       : r"soc.south.taps.pmc_hvm."
+                }
+        elif self.CPU_Gen == "MTL-P":
+            self.focus_tap_dict = {
+                r"TPSB_STAP"       : r"ioe.taps.tpsb.",
+                r"PMC_HVM_STAP"    : r"ioe.taps.pmc_debug.",
+                r"DFX_PAREDP_STAP" : r"ioe.taps.dfx_parioepptmpphy.",
+                r"TAP2IOSFSB_GP"   : r"soc.north.taps.tap2iosfsb_gp.", # or "gcd.taps.tap2iosfgp." or "compute0.taps.tap2iosfgp."
+                r"IPU_STAP"        : r"NON EXISTANT!",
+                r"NPK_STAP"        : r"soc.south.taps.npk.", # or 'soc.south.taps.npk.'
+                r"GPIOCOM0_STAP"   : r"soc.south.taps.gpiocom0.",
+                r"GPIOCOM1_STAP"   : r"soc.south.taps.gpiocom1.",
+                r"GPIOCOM3_STAP"   : r"soc.south.taps.gpiocom3.",
+                r"GPIOCOM4_STAP"   : r"soc.south.taps.gpiocom4.",
+                r"GPIOCOM5_STAP"   : r"soc.south.taps.gpiocom5.",
+                r"DFX_PARPXPBG5PHY_STAP" : r"ioe.taps.dfx_parioepg5phy.",
+                r"DFX_PARPXPAMPPHY_STAP" : r"NON EXISTANT!",
+                r"TAM_STAP"        : r"ioe.taps.tam.", # or "soc.south.taps.tam."
+                r"DFX_PAR_IOM_TAPLINKNW_PHY_FIA_0_CDU_APOLLO0_TAP" : r"ioe.taps.dfx_par_iom_taplinknw_phy_fia_0_cdu_apollo0.",
+                r"DFX_PAR_IOM_TAPLINKNW_PHY_FIA_1_CDU_APOLLO0_TAP" : r"ioe.taps.dfx_par_iom_taplinknw_phy_fia_1_cdu_apollo0.",
+                r"DFX_PAR_IOM_TAPLINKNW_PHY_FIA_0_MG0_TAP0"        : r"ioe.taps.dfx_par_iom_taplinknw_phy_fia_0_mg0_tap0.",
+                r"DFX_PAR_IOM_TAPLINKNW_PHY_FIA_1_MG0_TAP0"        : r"ioe.taps.dfx_par_iom_taplinknw_phy_fia_1_mg0_tap0.",
+                r"DFX_PAR_IOM_TAPLINKNW_PHY_FIA_0_MG1_TAP0"        : r"ioe.taps.dfx_par_iom_taplinknw_phy_fia_0_mg1_tap0.",
+                r"DFX_PAR_IOM_TAPLINKNW_PHY_FIA_1_MG1_TAP0"        : r"ioe.taps.dfx_par_iom_taplinknw_phy_fia_1_mg1_tap0."
+                }
+        elif self.CPU_Gen == "PTL":
+            self.focus_tap_dict = {
+                r'DFX_PARISCLK_STAP' : r'soc.taps.dfx_parisclk.',
+                r'IPU_STAP'          : r'soc.taps.ipu.',
+                r'ISCLK_STAP'        : r'soc.taps.isclk.',
+                }
+            ### I M P O R T A N T !!!!!!!! YOU NEED TO ADD '.' AT THE END OF THE TRANSLATED TAP NAME, AND ALSO PAY ATTENTION TO THE FIRST ELEMENT IN THE HIERARCHY.
+        self.taps_used = set()
+        self.direct_reg = direct_reg
+        self.reg_address = ""
+        self.direct_command = ""
+        self.direct_write_flush = True
+        self.data = ""
+        self.compare_flag = False
+        if self.direct_reg == True:
+            self.iom_block = True
+        else:
+            self.iom_block = False
+        self.run()
+
+
+    def prRed(self,skk):
+        print("\033[91m {}\033[00m" .format(skk))
+    def prGreen(self,skk):
+        print("\033[92m {}\033[00m" .format(skk))
+    def prYellow(self,skk):
+        print("\033[93m {}\033[00m" .format(skk))
+
+    def printC1(self,a,file):
+##        print(a)
+        file.write("    " + a + "\n")
+
+    def bitfield(self,n):
+        a = self.bitfield_rev(n)
+        b= []
+        for i in a:
+            b.insert(0,i)
+        return b
+
+    def bitfield2(self,n):
+        a = self.bitfield2_rev(n)
+        b= []
+        for i in a:
+            b.insert(0,i)
+        return b
+
+    def bitfield2_rev(self,n):
+        if type(n) is not str:
+            n = hex(n)
+        if n[1] == "x":
+            num = int(n,16)
+        elif n[1] != "b":
+            num = int(n)
+        if n[1] != "b":
+            bitArr = ["1" if digit=='1' else "0" for digit in bin(num)[2:]]
+            return bitArr
+        else:
+            a = []
+            for digit in n[2:]:
+                a.append(digit)
+            return a
+
+    def bitfield_rev(self,n):
+        if type(n) is not str:
+            n = hex(n)
+        output = []
+        mid=""
+        if n[1] == "x":
+            for fourbit in n[2:]:
+                mid += str(bin(int(fourbit, 16))[2:].zfill(4))
+            return self.bitfield_rev("0b" + mid)
+        elif n[1] == "b":
+            for bit in n[2:]:
+                output.append(bit)
+            return output
+
+    def bitArr2hex(self,bitArr):
+        out_str = ""
+        for bit in reversed(bitArr):
+            out_str += bit
+        return int(out_str,2)
+
+    def reg_compare(self,reg,data):
+        for i in range(len(data)):
+##            print(i)
+##            print("reg =     {}".format(reg))
+##            print("reg[i] =  {}".format(reg[i]))
+##            print("data =    {}".format(data))
+##            print("data[i] = {}".format(data[i]))
+            if data[i] == "x" or data[i] == "X" or reg[i] == data[i]:
+                continue
+            else:
+                return False
+        return True
+
+    def comp_command(self,row_num, row:str, output,spf_file):
+        if row.startswith("label"):
+            if (self.labels == True):
+                # Need to add comment "label: ..."
+                x = "##>>> SPF Label:    {}".format(row[6:-2])
+                self.printC1(x,output)
+            self.printC1("""last_label = {}""".format(row[6:-2].split(",")[0]),output)
+            self.printC1("print(last_label)",output)
+            self.print_last_label = True
+            self.prev_row = row
+            return
+    
+        if self.iom_block == True:
+            if row.startswith("pass itpp"):
+                self.iom_block == False
+            else:
+                self.prev_row = row
+                return
+
+        # RETURN ERROR ON MISSING REG NAME WHEN DIRECT WRITING TO REG
+        if self.direct_reg == True and self.prev_row.startswith('pass itpp') and 'CMD_WRITE' in self.prev_row:
+            if not (row.startswith('pass itpp') and 'REG_NAME' in row ):
+                output.close()
+                print(spf_file)
+                print(f"row number: {row_num}")
+                print(self.prev_row)
+                print(row)
+                raise error_msg("no reg names")
+
+        if row.startswith(r"focus_tap"):
+            # Set focus tap. goes to: sv.socket0.soc.taps.<focus_tap_sv>.register
+            self.focus_tap_sv = []
+            taps = row.replace("focus_tap ","").split(";")[0]
+            taps = taps.split()
+            for tap in taps:
+                try:
+                    self.focus_tap_sv.append(self.focus_tap_dict[tap])
+                except KeyError as e:
+                    print("Tap not found: " + str(e))
+                    context_search_and_print(tap, self.Root_Path, 10)
+                self.taps_used.add(self.focus_tap_dict[tap])
+
+        elif row.startswith(r"set"):
+            # if self.direct_reg == True:
+            #     if self.direct_command == True:
+            #         self.direct_command = False
+            #         if row.startswith("set CRSEL[15:0]"):
+            #             data = row.split(' = ')[1].strip(";\n")
+            #             #convert bin or hex to hex string
+            #             if data[1] == 'b':
+            #                 data = hex(int(data[2:],2))
+            #             elif data[1] == 'h':
+            #                 data = hex(int(data[2:],16))
+            #             self.printC1("exec('sv.socket0.soc." + self.itpp_reg_name[:37] + r"%s" +self.itpp_reg_name[38:] + " = " + self.data + r"'%index)", output)
+            #             return
+            #     else:
+            #         pass
+
+            if self.direct_reg == True:
+                if row.startswith("set CRSEL"):
+                    self.direct_write_flush = False
+                    self.prev_row = row
+                    return
+            ##save reg to param_read
+            self.reg_name = row.split(" ")[1].split("[")[0].split("->")[0].replace(" ","").lower()
+            if self.prev_reg != self.reg_name:
+                if self.flush_flag == False and self.prev_reg != "":
+                    for tap in range(len(self.focus_tap_sv)):
+                        self.printC1("reg{}.flush()".format(tap),output)
+                    self.printC1("\n    \n    ",output)
+                self.prev_reg = self.reg_name
+                ## Init new Reg
+                self.printC1("##### WRITE TO REGISTER #####",output)
+                for tap in range(len(self.focus_tap_sv)):
+                    self.full_reg_name = self.svPath + self.focus_tap_sv[tap] + self.reg_name
+
+                    edp_direct_access_rule = (self.direct_reg == True) and (self.focus_tap_sv[tap] == 'soc.taps.tpsb.' and self.reg_name == 'sbmsggo')
+                    tcss_direct_access_rule = (self.direct_reg == True) and (self.focus_tap_sv[tap] in[
+                                                                                                    'soc.taps.dfx_par_iom_taplinknw_phy_fia_0_mg0_tap0.',
+                                                                                                    'soc.taps.dfx_par_iom_taplinknw_phy_fia_0_mg1_tap0.',
+                                                                                                    'soc.taps.dfx_par_iom_taplinknw_phy_fia_1_mg0_tap0.']
+                                                                                                    and self.reg_name == 'crsel')
+                    '''
+                    if (self.direct_reg == True) and (edp_direct_access_rule == True): #check for direct register access flag
+                        #derive the direct reg access from the tap name and the register address
+                        while(not ('set SBMSGGO[63:48] = ' in row)):
+                            row = spf_file.readline()
+                        if 'set SBMSGGO[63:48] = ' in row:
+                            self.reg_address = hex(int(row.split(" = 'b")[1].split(';')[0], 2))
+                            #self.printC1("reg{0} = svReg({1})".format(tap,reg_address),output)
+                            row = spf_file.readline()
+                        if 'set SBMSGGO[95:64] = ' in row: # We write to the register
+                            data = hex(int(row.split(" = 'b")[1].split(';')[0], 2))
+                            self.printC1(f"reg[{self.reg_address}] = {data}",output)     ### TBD: replace  reg[{reg_address}]  with real data from CRIF
+                            print (f"reg_name= {self.full_reg_name}, reg_address= {self.reg_address}, data= {data}")
+                        else: #we later compare or capture this register
+                            print (f"reg_name= {self.full_reg_name}, reg_address= {self.reg_address}, compare_mode")
+                        row = spf_file.readline()
+                        '''
+
+                    self.printC1("reg{0} = svReg({1})".format(tap,self.full_reg_name),output)
+                        
+            ##get the indexes of the bits we want to write
+            data = "0" + row.split("=")[1].split(";")[0].split(r"'")[1].replace("h","x")
+            if "[" in row.split(r"#")[0].split(r"=")[0]:
+                indexes = row.split("[")[1].split("]")[0]
+                if ":" in indexes:
+                    sv_field = (int(indexes.split(":")[0]) ,int(indexes.split(":")[1]) )
+                else:
+                    sv_field = (int(indexes), int(indexes))
+                for tap in range(len(self.focus_tap_sv)):
+                    self.printC1("""reg%s.storeField(%s,"%s")""" %(tap,sv_field,data),output)
+            elif "->" in row.split(r"#")[0].split(r"=")[0]:
+                reg_and_field = row.replace("set ", "").split("=")[0].replace(" ","")
+                sv_field = reg_and_field.split("->")[1].lower()
+                for tap in range(len(self.focus_tap_sv)):
+                    self.printC1("""reg%s.storeField("%s","%s")""" %(tap,sv_field,data),output)
+            self.flush_flag = False
+
+        elif row.startswith("flush"):
+            self.flush_flag = True
+            if self.direct_write_flush == False:
+                self.direct_write_flush = True
+                self.direct_command  = ""
+                self.prev_row = row
+                return
+            elif self.prev_row.split(" ")[0] == "set" or self.prev_row.startswith("#") or self.prev_row.startswith("mask") or self.prev_row.startswith("capture") or self.prev_row == ("\n"):
+                for tap in range(len(self.focus_tap_sv)):
+                    self.printC1("reg{}.flush()".format(tap),output)
+                self.printC1("\n    \n    ",output)
+            elif self.prev_row.split(" ")[0] == "compare":
+                pass
+            else:
+                self.printC1("### ERROR Flush not recognized ###",output)
+                self.printC1("###   >>>"+self.prev_row,output)
+                self.printC1("""print("### ERROR Flush not recognized ###")""",output)
+
+        elif row.startswith(r"compare SBMSGRSP->STATUS") or row.startswith(r"compare TAP2APBR_GO->ACK") or row.startswith(r"compare TAP2APBR_GO->ERROR") or row.startswith(r"compare TAP2APBR_GO->ERROR"):  ### Ignore SideBand Status bit
+            pass
+
+        elif row.startswith("compare"):
+            self.printC1("###### " + row.split(";")[0] + " #####",output)
+            ##save reg to param_read
+            self.reg_name = row.split(" ")[1].split("[")[0].split("->")[0].replace(" ","").lower()
+            if self.prev_reg != self.reg_name:
+                self.prev_reg = self.reg_name
+                ## get LIVE register size
+                if len(self.focus_tap_sv) > 1:
+                    input("Comparison of more than one tap!!!")
+                self.full_reg_name = self.svPath + self.focus_tap_sv[0] + self.reg_name
+                self.printC1("reg0 = svReg({})".format(self.full_reg_name),output)
+            # if self.print_last_label:
+            #     self.printC1("print(last_label)  #functional when running in sv",output)
+            #     self.print_last_label = False
+            data = "0" + row.split("=")[1].split(";")[0].split(r"'")[1].replace("h","x")
+            ##get the indexes of the bits we want to write
+            if "[" in row.split(r"#")[0].split(r"=")[0] and "->" in row.split(r"#")[0].split(r"=")[0]:   ####### NEW CASE
+                # a new creature
+                indexes = row.split("[")[1].split("]")[0]
+                if ":" in indexes:
+                    sv_field_i = (int(indexes.split(":")[0]) ,int(indexes.split(":")[1]) )
+                else:
+                    sv_field_i = (int(indexes), int(indexes))
+                reg_and_field = row.replace("set ", "").split("=")[0].replace(" ","")
+                sv_field = (reg_and_field.split("->")[1].lower().split("[")[0],sv_field_i[0],sv_field_i[1])
+                self.printC1("""reg0.compare(%s,"%s","%s","%s")\n    \n""" %(sv_field, data,self.itpp_reg_name,self.itpp_compare_targets),output)
+            elif "[" in row.split(r"#")[0].split(r"=")[0]:           ########   OK CASE   #################################
+                indexes = row.split("[")[1].split("]")[0]
+                if ":" in indexes:
+                    sv_field = (int(indexes.split(":")[0]) ,int(indexes.split(":")[1]) )
+                else:
+                    sv_field = (int(indexes), int(indexes))
+                self.printC1("""reg0.compare(%s,"%s","%s","%s")\n    \n""" %(sv_field, data,self.itpp_reg_name,self.itpp_compare_targets),output)
+            elif "->" in row.split(r"#")[0].split(r"=")[0]:      ################## OK CASE ###############################
+                reg_and_field = row.replace("set ", "").split("=")[0].replace(" ","")
+                sv_field = reg_and_field.split("->")[1].lower()
+                self.printC1("""reg0.compare("%s","%s","%s","%s")\n    \n""" %(sv_field, data,self.itpp_reg_name,self.itpp_compare_targets),output)
+
+        elif row.startswith("cycle"):
+            # Need to call self.cycle("value in row")
+            try:
+                delay_time = int(row.split("cycle")[1].strip().split(";")[0])
+            except:
+                pass
+            ####### Checked w/Idan: It's 1 Cycle of 400MHz Clock... well, let's assume 1 Cycle is 10 microseconds #########
+            delay_out = "time.sleep(%s)\n    \n    "%(delay_time/100000)
+            self.printC1("### " + row[:-2], output)
+            self.printC1(delay_out,output)
+
+        elif row.startswith("mask"):
+            # non relevant for sv
+            pass
+
+        elif row.startswith("capture"): ### UPDATE   self.itpp_reg_name   AND   self.itpp_compare_targets   DATA!!!
+            pass
+            # ##save reg to param_read
+            # if len(self.focus_tap_sv) > 1:
+            #     input("Capture of more than one tap!!!")
+            # self.reg_name = row.split(" ")[1].split("[")[0].split("->")[0].replace(" ","").lower()
+            # if self.prev_reg != self.reg_name:
+            #     self.prev_reg = self.reg_name
+            #     ## get LIVE register size
+            #     self.full_reg_name = self.svPath + self.focus_tap_sv[0] + self.reg_name
+            #     self.printC1("##### CAPTURE REGISTER (Print it's value) #####\n    reg0 = svReg({})".format(self.full_reg_name),output)
+            # ##get the indexes of the bits we want to write
+            # if "[" in row.split(r"#")[0].split(r"=")[0] and "->" in row.split(r"#")[0].split(r"=")[0]:
+            #     reg_and_field = row.replace("set ", "").split("=")[0].split(";")[0].strip(" ")
+            #     sv_field = reg_and_field.split("->")[1].lower()
+            # elif "[" in row.split(r"#")[0].split(r"=")[0]:
+            #     indexes = row.split("[")[1].split("]")[0]
+            #     if ":" in indexes:
+            #         sv_field = str((int(indexes.split(":")[0]) ,int(indexes.split(":")[1]) ))
+            #     else:
+            #         sv_field = (indexes, indexes)
+            #     self.printC1("""reg0.capture(%s)""" %(sv_field),output)
+            # elif "->" in row.split(r"#")[0].split(r"=")[0]:
+            #     reg_and_field = row.replace("set ", "").split("=")[0].split(";")[0].strip(" ")
+            #     sv_field = reg_and_field.split("->")[1].lower()
+            #     self.printC1("""reg0.capture("%s")""" %(sv_field),output)
+
+            self.flush_flag = False
+
+        elif row.startswith('#') or row.startswith('@') or row.startswith("comment") or row.startswith("//"):
+            # SPF Comment
+            if self.spf_comments == True:
+                x="##### SPF Comment:    {}".format(row[:-2])
+                self.printC1(x,output)
+            if (self.comment_reg_name_flag > 0) or ("# Reg: " in row): ## Enter into comment_reg_indicator mode
+                if "# Reg: " in row:
+                    self.comment_reg_name_flag = 6
+                    self.printC1("""print('%s')"""%row[2:-2],output)
+                else:
+                    self.comment_reg_name_flag = self.comment_reg_name_flag - 1
+                    self.printC1("""print('%s')"""%row[2:-2],output)
+
+        elif row.startswith("pass itpp"):
+            x="# {}".format(row[:-2])
+            self.printC1(x,output)
+            # Objective: Save last REG_NAME and display it when comparing
+            if self.direct_reg == True: #tap2cri: (Address 2'b00, Write 2'b01, Data 2'b01, Read 2'b11)
+                if row.startswith('pass itpp') and "tap2cri:COMPARE" in row:
+                    self.compare_flag = True
+                if row.startswith('pass itpp "#    DATA'):
+                    self.data = row.split(' = ')[1].strip('";\n')
+                    if self.compare_flag == True:
+                        self.prev_row = row
+                        return
+                    #convert bin or hex to hex string
+                    if self.data[1] == 'b':
+                        self.data = hex(int(self.data[2:],2))
+                    elif self.data[1] == 'h':
+                        self.data = hex(int(self.data[2:],16))
+
+                if 'CMD_WRITE' in row:
+                    command = row.split("'b")[1].split('";')[0]
+                    if command == '00': # Address
+                        self.direct_command = ""
+                    elif command == '01': # Write
+                        self.direct_command = "w"
+                    elif command == '10': # Data
+                        self.direct_command = ""
+                    elif command == '11': # Read
+                        self.direct_command = "r"
+                        
+                if 'REG_NAME' in row:
+                    self.direct_write_flush = False
+                    
+                    self.itpp_reg_name = row.split(" = ")[1].strip('";\n')
+                    pattern = r'[A-Z]{2}.*'
+                    a = re.search(pattern, self.itpp_reg_name.split("=>")[1])
+                    a = a.group()
+                    self.itpp_reg_name = self.itpp_reg_name.split("MemSpace")[0] + a
+                    self.itpp_reg_name = self.itpp_reg_name.lower().replace('/','.')
+                    if self.compare_flag == True:
+                        self.printC1("reg0 = svReg(path_to_tcss_phy_env{})".format(self.itpp_reg_name.split('tcss_phy_env_i_')[1][1:]),output)
+                        reg_numbits = """reg0.regSize - 1"""
+                        self.printC1("""exec('reg0.compare((%s,0),"%s","%s","%s")'%sindex)\n    \n""" %(reg_numbits, self.data.replace("'","0"), self.itpp_reg_name[:37] + r"%s" +self.itpp_reg_name[38:], "all",r"%"),output)
+                        self.compare_flag =False
+                        self.prev_row = row
+                        return
+                    if self.direct_command == "w":
+                        self.printC1("exec('sv.socket0.soc." + self.itpp_reg_name[:37] + r"%s" +self.itpp_reg_name[38:] + " = " + self.data + r"'%index)", output)
+                        self.direct_command = ""
+                        self.direct_write_flush = False
+                    elif self.direct_command == 'r':
+                        self.printC1("exec('sv.socket0.soc." + self.itpp_reg_name[:37] + r"%s" +self.itpp_reg_name[38:] + r".show'%index)", output)
+            
+            
+            else:
+                if "REG_NAME" in row:
+                    self.itpp_reg_name = row.split(" = ")[1].strip('";\n')
+                elif "COMPARE_TARGETS" in row:
+                    self.itpp_compare_targets = row.split("COMPARE_TARGETS = ")[1].strip('";\n')
+
+        elif row.startswith("\n"):
+            pass
+
+        else:
+            error_msg = """
+
+###UNRECOGNIZED FORMAT!!!!!!#######
+#
+#   >>>{}<<<#
+###################################
+
+""".format(row.strip("\n"))
+            self.printC1(error_msg,output)
+
+
+        self.prev_row = row
+
+    def run(self):
+        def define_output_path():
+            output_name = self.Output_Root_Dir + self.FilePath.replace(self.Root_Path,"").replace(".spf",".py").replace(".SPF",".py")
+            abc = output_name
+            abc2 = ""
+            for i in abc.split("\\")[:-1]:
+                abc2 += i + "\\"
+                try:
+                    os.mkdir(abc2[:-1])
+                except:
+                    pass
+            if self.direct_reg == True:
+                output_name = output_name.replace(".py","_DirectReg.py")
+            return output_name
+
+        def modify_line_spf_py(line:str):
+            line.replace(".spf",".py")
+            return line
+
+        input_name = self.FilePath
+
+        # Handle _FILE_NAMES.txt
+        if input_name.endswith("output.txt"):
+            output_name = define_output_path()
+            with open(input_name, 'r') as src_file:
+                with open(output_name, 'w') as dest_file:
+                    for line in src_file:
+                        dest_file.write(modify_line_spf_py(line))
+
+        if not (input_name.endswith(".spf") or input_name.endswith(".SPF")):
+            return
+        output_name = define_output_path()
+        if os.path.exists(output_name):
+            os.remove(output_name)
+        output = open(output_name,"w")
+        spf_file = open(input_name,"r")
+
+
+        # print the file name to the log
+        print(output_name,end="")
+
+        base_settings = """
+import sys, os, time, numpy
+import namednodes
+
+## FOR DEBUG:
+namednodes.sv.get_all()
+sv = namednodes.sv
+##from lunarlake.debug.domains.sio_dv import pysv_loader
+##sv = pysv_loader.object_singleton.object
+
+##class PythonSvSingleton:
+##    _instance = None
+##
+##    def __new__(cls, *args, **kwargs):
+##        if not cls._instance:
+##            cls._instance = super(PythonSvSingleton, cls).__new__(cls, *args, **kwargs)
+##        return cls._instance
+##
+##namednodes.sv.get_all()
+##object_singleton = PythonSvSingleton()
+##object_singleton.object = namednodes.sv
+
+
+def prRed(skk): print("\\033[91m {}\\033[00m" .format(skk))
+def prGreen(skk): print("\\033[92m {}\\033[00m" .format(skk))
+def prYellow(skk): print("\\033[93m {}\\033[00m" .format(skk))
+
+def reg_compare(reg,data):
+        for i in range(len(data)):
+            if data[i] == "x" or data[i] == "X" or reg[i] == data[i]:
+                continue
+            else:
+                return False
+        return True
+
+def bitfield(n):
+    a = bitfield_rev(n)
+    b= []
+    for i in a:
+        b.insert(0,i)
+    return b
+
+def bitfield2(n):
+    a = bitfield2_rev(n)
+    b= []
+    for i in a:
+        b.insert(0,i)
+    return b
+
+def bitfield2_rev(n):
+    if type(n) is not str:
+        n = hex(n)
+    if n[1] == "x":
+        num = int(n,16)
+    elif n[1] != "b":
+        num = int(n)
+    if n[1] != "b":
+        bitArr = ["1" if digit=='1' else "0" for digit in bin(num)[2:]]
+        return bitArr
+    else:
+        a = []
+        for digit in n[2:]:
+            a.append(digit)
+        return a
+
+
+def bitfield_rev(n):
+    if type(n) is not str:
+        n = hex(n)
+    output = []
+    mid=""
+    if n[1] == "x":
+        for fourbit in n[2:]:
+            mid += str(bin(int(fourbit, 16))[2:].zfill(4))
+        return bitfield_rev("0b" + mid)
+    elif n[1] == "b":
+        for bit in n[2:]:
+            output.append(bit)
+        return output
+
+def bitArr2hex(bitArr):
+    out_str = ""
+    for bit in reversed(bitArr):
+        out_str += bit
+    return int(out_str,2)
+
+
+
+class svReg():
+    def __init__(self, _regName):
+        self.regName = _regName
+        self.regNameStr = _regName.path
+        self.param_read_arr = bitfield(self.regName)
+        self.regSize = self.getRegSize(self.regName)
+        while len(self.param_read_arr) < self.regSize:
+            self.param_read_arr.append("0")
+
+    def getRegSize(self, _regName):
+        return _regName.numbits
+
+    def storeField(self, fieldName,data):
+        if isinstance(fieldName, tuple):
+            index = fieldName
+            data_arr = bitfield(data)
+            if data_arr == ['0']:
+                i = index[1]
+                while i < index[0]:
+                    data_arr.append('0')
+                    i += 1
+            i=0
+            for t in range(index[1],index[0]+1):
+                if i < len(data_arr):
+                    self.param_read_arr[t] = data_arr[i]
+                else:
+                    self.param_read_arr[t] = '0'
+                i += 1
+        else:
+            bit_offset = getattr(self.regName,fieldName).info['bitOffset']
+            index_len = getattr(self.regName,fieldName).info['bitWidth']
+            index = (int(str(bit_offset)) + int(str(index_len)) -1 ,  int(str(bit_offset)))
+            data_arr = bitfield(data)
+            if data_arr == ['0']:
+                i = index[1]
+                while i < index[0]:
+                    data_arr.append('0')
+                    i += 1
+            i=0
+            for t in range(index[1],index[0]+1):
+                if i < len(data_arr):
+                    self.param_read_arr[t] = data_arr[i]
+                else:
+                    self.param_read_arr[t] = '0'
+                i += 1
+
+    def compare(self, fieldName, data, reg_name, compare_targets):
+        if isinstance(fieldName, tuple):
+            if len(fieldName) == 2:
+                index = fieldName
+            else:
+                bit_offset = getattr(self.regName,fieldName[0].split("[")[0]).info['bitOffset']
+                index_len = getattr(self.regName,fieldName[0].split("[")[0]).info['bitWidth']
+                index = (int(str(bit_offset)) + int(str(index_len)) -1 ,  int(str(bit_offset)))
+                index =( int(str(index[0]))+ int(str(fieldName[1])) , int(str(index[0])) + int(str(fieldName[2])) + 1 )
+        else:
+            bit_offset = getattr(self.regName,fieldName).info['bitOffset']
+            index_len = getattr(self.regName,fieldName).info['bitWidth']
+            index = (int(str(bit_offset)) + int(str(index_len)) -1 ,  int(str(bit_offset)))
+        data_arr = bitfield2(data)
+        while len(data_arr) < index_len:
+            data_arr.append("0")
+        if reg_compare(self.param_read_arr[index[1]:index[0]+1],data_arr):
+            prGreen("### P A S S ###  compare %s = %s\\n                  compared fields: %s" %(reg_name, data, compare_targets))
+        else:
+            actualData = bitArr2hex(self.param_read_arr[index[1]:index[0]+1])
+            prRed("### F A I L ###  compare %s = %s               REG Value is: %s\\n                  compared fields: %s" %((reg_name, data, hex(actualData),compare_targets)))
+
+    def capture(self,fieldName):
+        if isinstance(fieldName, tuple):
+            if len(fieldName) == 2:
+                index = fieldName
+            else:
+                bit_offset = getattr(self.regName,fieldName[0]).info['bitOffset']
+                index_len = getattr(self.regName,fieldName[0]).info['bitWidth']
+                index = (int(str(bit_offset)) + int(str(index_len)) -1 ,  int(str(bit_offset)))
+                index =(index[0]+ fieldName[1], index[0]+fieldName[2]+1)
+        else:
+            bit_offset = getattr(self.regName,fieldName).info['bitOffset']
+            index_len = getattr(self.regName,fieldName).info['bitWidth']
+            index = (int(str(bit_offset)) + int(str(index_len)) -1 ,  int(str(bit_offset)))
+        actualData = bitArr2hex(self.param_read_arr[index[1]:index[0]+1])
+        print("%s = %s" % (self.regNameStr, actualData))
+
+
+    def flush(self):
+        self.regName.write(bitArr2hex(self.param_read_arr))
+
+
+
+prev_reg = ""
+reg_size = 0x0
+
+
+#####  END OF SETUP  ###########################################################
+
+def runConverted():
+        """
+        self.printC1(base_settings,output)
+        for row_num, row in enumerate(spf_file):
+            if row == ("\n"):
+                continue
+            else:
+                while row.startswith(" "):
+                    row = row[1:]
+            self.comp_command(row_num,row,output,spf_file)
+        #self.printC1("\nrunConverted()",output)
+        end_string = ',Converted Successfully !'
+        print (end_string)
+        output.close()
+
+    def returnTapsUsed(self):
+        return self.taps_used
+
+
+def main():
+    ############################################################################
+
+    for dirpath, dirnames, filenames in os.walk("C:\SPFs"):           ###   "C:\pythonsv\lunarlake\debug\domains\hsio_dv\Display"
+        for filename in [f for f in filenames if (f.endswith(".spf") or f.endswith(".SPF"))]:
+            if "ate_dptx_upcs_top_external_loopback_tx1_rx2_HDMI_6G_COLORDEPTH.spf" in filename:
+                input_name = dirpath+"\\"+filename
+                A = Command(input_name)
+    end_string = """
+    ###########################
+    #########---END---#########
+    ###########################"""
+    print (end_string)
+
+
+    ############################################################################
+    pass
+
+if __name__ == '__main__':
+    main()
diff --git a/ltk_spf_history.csv b/ltk_spf_history.csv
new file mode 100644
index 0000000..e20719c
--- /dev/null
+++ b/ltk_spf_history.csv
@@ -0,0 +1,3 @@
+C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/TCSS/cmem_tc0_dp_extlb_10_lfsr31.spf,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/TCSS/cmem_tc0_dp_anelb_1p62_lfsr31.spf
+C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/TCSS
+C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/TCSS\LTK_25-05-24_18-40-04,C:/Users/szusin/OneDrive - Intel Corporation/Documents/PTL/SPFs/TCSS\LTK_25-05-24_18-39-37
diff --git a/spf2sv_converter.py b/spf2sv_converter.py
new file mode 100644
index 0000000..3032a66
--- /dev/null
+++ b/spf2sv_converter.py
@@ -0,0 +1,214 @@
+import os, sys, datetime, re
+
+
+def week_num():
+    date = datetime.datetime.today()  # Replace with the desired date
+
+    work_week = date.strftime("%W")
+    week_day = (date.isoweekday() % 7) + 1  # Convert from ISO weekday (1-7) to custom weekday (0-6)
+    if week_day == 1:
+       work_week = str(int(work_week) + 1)
+    year = str(date.year)[-2:]  # Extract the last two digits of the year
+
+    date_format = "ww{}_{:d}'{}".format(work_week, week_day, year)
+    return date_format
+
+def tcss_add_phy_index_and_post_boot(output_dir,conversion_time):
+    def rewrite_file(file):
+        lines = file.readlines()
+        i=0
+        for line in lines:
+            # search for function line
+            if line == 'def runConverted():\n':
+                # insert variable to function line
+                lines[i] = 'def runConverted(phy_index=0, post_boot_config = True):\n'
+                break
+            i+=1
+        parameters_select="""
+    if post_boot_config:
+        print("\\npost_boot_config - start")
+        sv.socket0.soc.pmc.pmu.dfx_tcss_ctl.drv_tcss_hvmmode_en = 1
+        print("\\npost_boot_config - end")
+
+    if phy_index == 0:
+        path_to_cdu_apollo_taplinkcfg = sv.socket0.soc.taps.dfx_par_iom_taplinknw_phy_fia_0_cdu_apollo0.taplinkcfg
+        path_to_cdu_apollo_usb4_phy_common_reg = sv.socket0.soc.taps.dfx_par_iom_taplinknw_phy_fia_0_cdu_apollo0.usb4_phy_common_reg
+        path_to_mg_tap_crsel = sv.socket0.soc.taps.dfx_par_iom_taplinknw_phy_fia_0_mg0_tap0.crsel
+        path_to_tcss_phy_env = sv.socket0.soc.tcss.soc_regs_wrapper.tcss_phy_env_i_0
+        mg_index='0'
+        index='0'
+    elif phy_index == 1:
+        path_to_cdu_apollo_taplinkcfg = sv.socket0.soc.taps.dfx_par_iom_taplinknw_phy_fia_0_cdu_apollo1.taplinkcfg
+        path_to_cdu_apollo_usb4_phy_common_reg = sv.socket0.soc.taps.dfx_par_iom_taplinknw_phy_fia_0_cdu_apollo1.usb4_phy_common_reg
+        path_to_mg_tap_crsel = sv.socket0.soc.taps.dfx_par_iom_taplinknw_phy_fia_0_mg1_tap0.crsel
+        path_to_tcss_phy_env = sv.socket0.soc.tcss.soc_regs_wrapper.tcss_phy_env_i_1
+        mg_index='1'
+        index='1'
+    elif phy_index == 2:
+        path_to_cdu_apollo_taplinkcfg = sv.socket0.soc.taps.dfx_par_iom_taplinknw_phy_fia_1_cdu_apollo0.taplinkcfg
+        path_to_cdu_apollo_usb4_phy_common_reg = sv.socket0.soc.taps.dfx_par_iom_taplinknw_phy_fia_1_cdu_apollo0.usb4_phy_common_reg
+        path_to_mg_tap_crsel = sv.socket0.soc.taps.dfx_par_iom_taplinknw_phy_fia_1_mg0_tap0.crsel
+        path_to_tcss_phy_env = sv.socket0.soc.tcss.soc_regs_wrapper.tcss_phy_env_i_2
+        mg_index='0'
+        index='2'
+            """
+        lines.insert(i+1,parameters_select)
+        for line_num, line in enumerate(lines):
+            lines[line_num] = lines[line_num].replace("(sv.socket0.soc.taps.dfx_par_iom_taplinknw_phy_fia_0_cdu_apollo0.taplinkcfg","(path_to_cdu_apollo_taplinkcfg")
+            lines[line_num] = lines[line_num].replace('("kill_mg0_tap0_tclk_out"',r'("kill_mg%s_tap0_tclk_out"%mg_index')
+            lines[line_num] = lines[line_num].replace('(sv.socket0.soc.taps.dfx_par_iom_taplinknw_phy_fia_0_cdu_apollo0.usb4_phy_common_reg','(path_to_cdu_apollo_usb4_phy_common_reg')
+            lines[line_num] = lines[line_num].replace('(sv.socket0.soc.taps.dfx_par_iom_taplinknw_phy_fia_0_mg0_tap0.crsel','(path_to_mg_tap_crsel')
+            lines[line_num] = lines[line_num].replace('"TCSS/soc_regs_wrapper/tcss_phy_env_i_0','f"TCSS/soc_regs_wrapper/tcss_phy_env_i_{str(phy_index)}')
+
+        file.close()
+        #file_path1 = file_path.replace('.py','_CONVERTED.py')
+        with open(file_path, 'w') as file:
+            file.writelines(lines)
+            file.close()
+
+    def list_files_in_folder(folder_path):
+        file_list = []
+        for root, dirs, files in os.walk(folder_path):
+            for file in files:
+                file_path = os.path.join(root, file)
+                file_list.append(file_path)
+        return file_list
+
+    folder_path = output_dir
+    # get all files in the folder
+    files = list_files_in_folder(folder_path)
+    # filter files based on their name pattern
+    pattern = r".*tc.*\.py$"
+    files_to_process = [f for f in files if re.match(pattern, f)]
+    # process each file
+    for file in files_to_process:
+        file_path = os.path.join(folder_path, file)
+        file_modification_time = os.path.getmtime(file_path)
+        if file_modification_time > conversion_time:
+            with open(file_path, 'r') as file:
+                rewrite_file(file)
+            print("tcss post boot script added on: %s"%file_path)
+    print("tcss_add_phy_index_and_post_boot DONE")
+
+def edp_add_post_boot(output_dir,conversion_time):
+    def rewrite_file(file):
+        lines = file.readlines()
+        i=0
+        for line in lines:
+            # search for function line
+            if line == 'def runConverted():\n':
+                # insert variable to function line
+                lines[i] = 'def runConverted(post_boot_config = False):\n'
+                break
+            i+=1
+        parameters_select="""
+    if post_boot_config:
+
+        print("\\npost_boot_config - start")
+
+        sv.socket0.soc.edp_phy.dwc_usbc31dptxphy_phy_x4_ns.rawlane0_dig_pcs_xf_rx_ovrd_in_1 = 0
+        sv.socket0.soc.edp_phy.dwc_usbc31dptxphy_phy_x4_ns.rawlane1_dig_pcs_xf_rx_ovrd_in_1 = 0
+        sv.socket0.soc.edp_phy.dwc_usbc31dptxphy_phy_x4_ns.rawlane2_dig_pcs_xf_rx_ovrd_in_1 = 0
+        sv.socket0.soc.edp_phy.dwc_usbc31dptxphy_phy_x4_ns.rawlane3_dig_pcs_xf_rx_ovrd_in_1 = 0
+        sv.socket0.soc.edp_phy.dwc_usbc31dptxphy_phy_x4_ns.rawlane0_dig_pcs_xf_ate_ovrd_in = 0xaf
+        sv.socket0.soc.edp_phy.dwc_usbc31dptxphy_phy_x4_ns.rawlane1_dig_pcs_xf_ate_ovrd_in = 0xaf
+        sv.socket0.soc.edp_phy.dwc_usbc31dptxphy_phy_x4_ns.rawlane2_dig_pcs_xf_ate_ovrd_in = 0xaf
+        sv.socket0.soc.edp_phy.dwc_usbc31dptxphy_phy_x4_ns.rawlane3_dig_pcs_xf_ate_ovrd_in = 0xaf
+
+        print("\\npost_boot_config - end")
+
+            """
+        lines.insert(i+1,parameters_select)
+        file.close()
+        #file_path1 = file_path.replace('.py','_CONVERTED.py')
+        with open(file_path, 'w') as file:
+            file.writelines(lines)
+            file.close()
+
+    def list_files_in_folder(folder_path):
+        file_list = []
+        for root, dirs, files in os.walk(folder_path):
+            for file in files:
+                file_path = os.path.join(root, file)
+                file_list.append(file_path)
+        return file_list
+
+    folder_path = output_dir
+    # get all files in the folder
+    files = list_files_in_folder(folder_path)
+    # filter files based on their name pattern
+    pattern = r".*eDP.*\.py$"
+    files_to_process = [f for f in files if re.match(pattern, f)]
+    # process each file
+    for file in files_to_process:
+        file_path = os.path.join(folder_path, file)
+        file_modification_time = os.path.getmtime(file_path)
+        if file_modification_time > conversion_time:
+            with open(file_path, 'r') as file:
+                rewrite_file(file)
+            print("eDP post boot script added on: %s"%file_path)
+    print("edp_add_post_boot DONE")
+
+
+class run():
+    """
+    Translate SPF files to PythonSV file.\n
+    Clones file stracture of the input directory to the output directory.\n
+    Usage:
+        run(input_dir,[optional] output_dir,[optional] CPUgen)\n
+        On default: output_dir = 'C:\input_dir\TRANSLATED\\'\n
+                    CPUgen = 'LNL'\n
+        CPUgen can be ['LNL' , 'MTL-P']
+    """
+
+    def __init__(self,direct_reg,conversion_time,log_file_path,_week_folder_en, _input_dir, _output_dir="",CPUgen = "PTL"):
+        self.input_dir = _input_dir
+        if _output_dir == "":
+            self.output_dir = _input_dir + "\\TRANSLATED"
+        elif _week_folder_en == True:
+            self.output_dir = _output_dir + "\\" + week_num()
+        elif _week_folder_en == False:
+            self.output_dir = _output_dir
+        self.CPUgen = CPUgen
+        self.direct_reg = direct_reg
+        self.run_translation()
+        print('') # prints newline seperator
+        tcss_add_phy_index_and_post_boot(self.output_dir,conversion_time)
+        print('') # prints newline seperator
+        edp_add_post_boot(self.output_dir,conversion_time)
+        print('') # prints newline seperator
+        print(log_file_path)
+
+
+    def run_translation(self):
+        # root_dirs = [ r"C:\pythonsv\lunarlake\debug\domains\hsio_dv\Display",
+        # r"C:\spf_parsing\SPFs"]
+
+        # get the current working directory
+        # cwd = os.getcwd()
+        # print(cwd)
+
+        # add the current working directory to the Python path
+        # sys.path.append(cwd)
+
+        # # open file to save used taps
+        # used_taps_file = open(r"C:\SPFs\used_taps.csv", "w",newline="")
+        # writer = csv.writer(used_taps_file)
+        # writer.writerow(["file_name", "taps"])
+        # import the file using the file name
+
+        sys.path.append(os.getcwd())
+        #sys.path.append(r"C:\hamo_git\sio\LNL\sio_dv\spfs_source")
+        import lnl_spf_2_pythonsv_script_BlackBox_Advanced as C1converter
+
+
+        # use the os.walk() function to traverse the directory tree
+        for dir_path, subdirs, files in os.walk(self.input_dir):
+            # loop through all the files in the current directory
+            for file_name in files:
+                # use the os.path.join() function to get the full path to the file
+                file_path = os.path.join(dir_path, file_name)
+                A = C1converter.Command(self.input_dir, file_path, self.output_dir, self.CPUgen, self.direct_reg)
+                # taps = list(A.returnTapsUsed())
+                # taps.insert(0,file_name)
+                # writer.writerow(taps)
